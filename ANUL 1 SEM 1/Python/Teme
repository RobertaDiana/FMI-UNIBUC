# ex 1
# s1=input('s1=')
# s2=input('s2=')
# s3=''
# s2=s2[::-1]
# s1_length=len(s1)
# s2_length=len(s2)
# length = max(s1_length, s2_length)
# for i in range(length):
#     if i<s1_length:
#      s3 = s3 + s1[i]
#     if i<s2_length:
#         s3 = s3 +s2[i]
# print(s3)

#TUTORIAT3-Daria
#ex1
# citirea unei liste cu n elem
# n=int(input('n='))
# list=[int(input()) for i in range(n)]
# print(list)
#sau
# n=int(input('n='))
# lista=[]
# for i in range(n):
#    lista.append(int(input("elem=")))n=int(input())
#
# print(lista)

# y=int(input('y='))
# ls=[x for x in lista if x!=y]
# print(ls)


#ex3
#a)
# lista=[x for x in range(2,25) if x%2==0]
# print(lista)
#sau
# lista=[x for x in range(2,25,2)]
# print(lista)

#b)
# n=int(input("n="))
# lista=[x if x%2==0 else -x for x in range(1,n+1)]
# print(lista)

#c)
# n=int(input("n="))
# lista=[]
# for i in range(n):
#         lista.append(int(input("elem=")))
# lista1=[lista[x] for x in range(0,n,2)]
# print(lista1)

#ex1=pbinfo
# x=int(input("x="))
# y=int(input("y="))
# print(x+y)

#TUTORIAT1-LUNI
#ex1
# a=int(input("a="))
# b=int(input("b="))
# c=int(input("c="))
# if (a+b>c and a+c>b and b+c>a):
#     print("este triunghi")
# else:
#     print("nu este")

#ex2
# n = int(input("n="))
# i = 1
# while i * i * i < n:
#     i = i + 1  # i += 1
# if i * i * i == n:
#     print("Este cub")
# else:
#     print("Nu este cub")

#ex3
# n=int(input("n="))
# if n%2!=0:
#     print("weird")
# elif n%2==0 and 2 <= n <= 25:
#     print("not weird")
# elif n%2==0 and 6 <= n <= 20:
#     print ("weird")
# elif n%2==0 and n > 20:
#     print("not weird")

# ex4
# a=int(input("a="))
# b=int(input("b="))
#  for i in range(a, b+1):
#      for d in range(2, i//2+1):
#         if i%d==0:
#             break
#      else:
#           print(i)
#           break

#ex5
# a=int(input("a="))
# b=int(input("b="))
# maxim_divizori_primi = -1
# for i in range(a, b+1):
#     numar_divizori = 0
#     divizor = 2
#     temp = i
#     while temp > 1:
#         if temp % divizor == 0:
#             numar_divizori += 1
#             while temp % divizor == 0:
#                 temp /= divizor
#         else:
#             divizor += 1
#     if numar_divizori > maxim_divizori_primi:
#         maxim_divizori_primi = numar_divizori
#
# for i in range (a, b+1):
#     numar_divizori = 0
#     divizor = 2
#     temp = i
#     while temp > 1:
#         if temp % divizor == 0:
#             numar_divizori += 1
#             while temp % divizor == 0:
#                 temp /= divizor
#         else:
#             divizor += 1
#     if numar_divizori == maxim_divizori_primi:
#         print(i, end=" ")


#ex6
# n=int(input("n="))
# min1=999999999
# min2=999999999
# for i in range (1,n-2):
#     nr=int(input("nr="))
#     if (nr<min1):
#         min2=min1
#         min1=nr
#     elif nr<min2:
#         min2=nr
#     if (min1!=min2):
#         print(min1, min2)


# ex7
# from math import sqrt
# print(sqrt(4))
# x=int(input("x="))
# if  x<=-9:
#     nr= abs(x)
# elif -9 < x < 10:
#     nr= sqrt(x+9)
# elif 10 <= x < 20:
#     nr= x**2
# print(nr)


#TUTORIAT2-MARTI
#ex1
# v=[int (x) for x in input("x=").split() ]
# secvmax=0
# secv=0
# for x in v: #sau for i in range(len(v))
#    if x & (x+1) == 0:
#       secv+=1
#       if secv> secvmax:
#           secvmax=secv
#    else:
#           secv=0
# print(secvmax)


#ex2
# v=[int (x) for x in input("x=").split() ]
# vectorcaract=[ False for x in range(100) ]
# for elem in v:
#     if 10<= elem <=99:
#         vectorcaract[elem]=True
# for i in range(10,100):
#     if vectorcaract[i] == False:
#      print(i)

#ex3
# v=[int (x) for x in input("x=").split()]
# frecv=[0 for x in range(11)]
# for elem in v:
#     frecv[elem]+=1
# for elem in range(10):
#     for i in range (frecv[elem]):
#         print(elem, end=' ')

#exsuplimentar
# se da un vector. sa se afiseze suma elem vectorului
# print(sum([int(x) for x in input("x=").split()]))

#ex4
# v=[int(x) for x in input("x=").split()]
# for i in range(len(v)+1):
#     if (i+1)%2==0:
#         print(v[i], end=" ")
# print()
# for i in range(len(v)-1, -1, -1):
#     if (i + 1) % 2 == 1:
#         print(v[i], end=" ")

# se afiseaza elem pare
# v=[int(x) for x in input("x=").split()]
# print(x for x in v if x%2==0)

#se afiseaza elem de pe pozitiile pare in ordine cresc
# v=[int(x) for x in input("x=").split()]
# print([v[i] for i in range(len(v)) if i%2==0])

#se afiseaza elem de pe pozitiile impare in ordine descresc
# v=[int(x) for x in input("x=").split()]
# print([v[i] for i in range(len(v)-1, -1, -1) if i%2==1])

#seminar3
# ex3
# ls=[int(x) for x in input("nr=").split() if int(x)>0]
# print(f"lista{ls}")

# ex6
# lista=[-3, -8, 9, -9, -8]
# i=0
# while i<len(lista):
#     if lista[i]<0:
#         lista.insert(i+1, 0)
#         i+=1
#     i+=1
# print(lista)

# TUTORIAT2-LUNI
# ex1
# s1=str(input("s1="))
# s2=str(input("s2="))
# s3=""
# s2 = s2[::-1]
# l1=len(s1)
# l2=len(s2)
# l=max (l1,l2)
# for i in range(l):
#     if i < l1:
#         s3 = s3 + s1[i]
#     if i < l2:
#         s3 = s3 + s2[i]
# print(s3)

# ex2
# s1=input("s1=")
# s2=input("s2=")
# for i in s1:
#     s1.count(s2)
# print(s1.count(s2))

# ex3
# s=input("s=")
# sum=0
# pr=1
# ma=0
# nr=0
# for i in s:
#    if i.isdigit():
#        sum+=int(i)
#        pr*=int(i)
#        nr+=1
# print(sum,"",pr,"")
# if nr>0:
#     print("ma=", sum/nr)

#ex4
# sir=input("sir=")
# caract=["/",".","%","$","#","@","&","*","(",","]
# for i in caract:
#       sir=sir.replace(i,"*")
# print(sir)

#ex5
# sir=input("sir=")
# s=input("s=")
# midle_index = int(len(sir)/2)
# sir = sir[:midle_index:] + s + sir[midle_index:]
# print(sir)

#ex6
# s=input("s=")
# for i in s:
#     s=s.lower()
# print(s)

# s = "Programarea este o Disciplina de Viitor"
# sir = ""
# for i in range(len(s)):
#     if s[i].isalpha() and s[i].isupper():
#         sir = sir + s[i].lower()
#     else:
#         sir = sir + s[i]
# print(sir)

#ex7
# s=input("s=")
# s1=""
# for i in range(len(s)):
#     if i%2==0:
#         s1=s1+s[i]
# print(s1)

#ex8
# print(round(3.14567263,2))

# sau

# x = 3.1415926
# y = 12.9999
# print(x)
# print("{:.2f}".format(x))
# print(y)
# print("{:.2f}".format(y))


# # OBSERVATIE!!!!!!!!
# s=input("s=")
# for i in s:
#     print(i,end="")
# print(" ")
# for i in range(len(s)):
#     print(i, end="")

#ex10
# s1=input("s1=")
# s2=input("s2=")
# s3=""
# if s1[-1]==s2[0]:
#     s3=s1[0:len(s1)-1]+s2
# elif s1[1]==s2[-2]:
#     s3=s1+s2
# print(s3)

#TUTORIAT3-LUNI
#ex1
# n=int(input("n="))
# lista=[]
# for i in range(n):
#     lista.append(int(input("elem=")))
# y = int(input("y = "))
# ls = [x for x in lista if x != y]
# print(ls)

#ex2
# l_original = [1, 2, [3, [4, 5, [6, 7], 11], 12], 13, 14]
# l_add = [8, 9, 10]
# l_original[2][1][2].extend(l_add)
# print(l_original)

#ex3
#a)
# l=[int(x) for x in range(2,25) if x%2==0]
# print(l)

#b)
# n=int(input("n="))
# l=[int(x) if x%2==0 else -x for x in range(1,n+1)]
# print(l)

#c)
# n = int(input("n="))
# lista = []
# for i in range(n):
#     lista.append(int(input("elem=")))
# print(lista)
# lista3 = [lista[x] for x in range(0, n, 2)]
# print(lista3)

#d)
# lista = [2, 4, 5, 8, 10, 15]
# lista_rez = [lista[x] for x in range(len(lista)) if x % 2 != lista[x] % 2]
# print(lista_rez)

#e)
# n = int(input("n="))
# ls = [[] if l == 0 else [l] * l for l in range(n)]
# print(ls)

#ex4
# n = int(input("n="))
# my_list = []
# # retinem paritatea sumei cifrelor, astfel:
# # paritate[i]=0 daca suma cifrelor lui i este para
# # paritate[i]=1 daca suma cifrelor lui i este impara
# paritate = []
# for i in range(n):
#     my_list.append(int(input("elem=")))
# # calculam suma cifrelor fiecarui element din lista
#     aux = my_list[i]
#     suma_cifre = 0
#     while aux:
#         suma_cifre += aux % 10
#         aux //= 10
#     if suma_cifre % 2 == 0:
#         paritate.append(0)
#     else:
#         paritate.append(1)
# print(paritate)

# ordonam elementele astfel:
# suma cifrelor para -> descrescator
# suma cifrelor impara -> crescator
# for i in range(len(my_list)-1):
#     for j in range(i+1, len(my_list)):
#         if (paritate[i] == 0 and paritate[j] == 0 and my_list[i] < my_list[j]
#         or paritate[i] == 1 and paritate[j] == 1 and my_list[i] > my_list[j]
#         or paritate[i] == 1 and paritate[j] == 0):
#             aux = my_list[i]
#             my_list[i] = my_list[j]
#             my_list[j] = aux
#             aux = paritate[i]
#             paritate[i] = paritate[j]
#             paritate[j] = aux
#
# print(my_list)

#ex5
# m=int(input("m="))
# n=int(input("n="))
# x=int(input("x="))
# matrice=[[0 for j in range(n)] for i in range(m)]
# for i in range(m):
#     for j in range(n):
#          print(matrice[i][j], end=" ")
#     print()
#a)
# for i in range(m):
#     if i%2==0:
#         for j in range(n):
#             matrice[i][j]=(i*n+j)*x
#     else:
#         for j in range(n):
#            matrice[i][j]=(i*n+n-j-1)*x
# for i in range(m):
#     for j in range(n):
#          print(matrice[i][j], end=" ")
#     print()
#
# #b)
# suma_maxima=-1
# indice=-1
# for j in range(n):
#     suma=0
#     for i in range(m):
#         suma+=matrice[i][j]
#     if suma>suma_maxima:
#         suma_maxima=suma
#         indice=j
# print(suma_maxima, j)

#c)
# diagonala principala: i=j
# diagonala secundara: i+j=n-1
# deasupra diagonalei principale: i<j
# sub diagonala principala: i>j
# deasupra diagonalei secundare: i+j< n-1
# sub diagonala secundara: i+j> n-1

# suma=0
# for i in range(m):
#     suma+=matrice[i][i]
# print(f"suma elem de pe DP:{suma}")

# produs=1
# for j in range(n):
#     produs+=matrice[n-j-1][j]
# print(f"produsul elem de pe DS:{produs}")

# suma_impare=0
# for i in range(m):
#     for j in range(n):
#         if i>j and i+j<n-1 and matrice[i][j]%2==1:
#             suma_impare+=matrice[i][j]
# print(f"suma elem din zona data:{suma_impare}")

# citire elem matrice, fiecare linie pe un rand
# m = int(input("m="))
# n = int(input("n="))
# matrice = []
# for i in range(m):
#     linie = [int(x) for x in input().split()]
#     matrice.append(linie)
# for i in range(m):
#     for elem in matrice[i]:
#         print(elem, end='')
#     print()
#ex1
# s = input("s=")
# suma = 0
# for elem in s.split("+"):
#     suma+=int(elem)
# print(suma)

#ex2
# s=input("s=")
# for cuv in s.split():
#     if cuv == cuv[::-1]:
#         print("palindrom", end = " ")
#     else:
#         print("nu e", end = " ")

#ex3
# s=input("s=")
# sol=" "
# for i in range(len(s)):
#     if s[i]=="1":
#         sol+="unu"
#     elif s[i]=="2":
#         sol+="doi"
#     elif s[i]=="3":
#         sol+="trei"
#     elif s[i]=="4":
#         sol+="patru"
#     else:
#         sol+=s[i]
# print(sol)

#ex4
# s=str(input("s="))
# sep=",.;:"
# for i in s:
#     if i in sep:
#         s=s.replace(sep, " ")
# print(s)

# s=input("s=")
# for separator in ",.;:":
#     s=s.replace(separator, " ")
# print(s)

#LABORATOR3
#Siruri de caractere-ex4
# s=input("s=")
# vocale="aeiou"
# for i in vocale:
#     s=s.replace(i, f'{i}p{i}')
# print(s)

#SEMINAR4

#CUM SE CITESTE DIN FISIER
# with open("numere.in", 'r') as fin:
#     numerele = fin.read()
# numere_list = [float(sir) for sir in numerele.split() if sir.isdigit()]
# media_aritmetica = sum(numere_list) / len(numere_list)
# print(f"{media_aritmetica:.2f}")
#
# with open("numere.out", 'w') as fout:
#     fout.write(f"{media_aritmetica:.2f}")

#SE CITESTE LINIE CU LINIE
# with open('numere_comune.in', 'r') as fin:
# linii_fisier = fin.readlines()
# matrice = [linie.split() for linie in linii_fisier]

#TUTORIAT5-MARTI
#1a)
# def min_max(lista):
#     minim=lista[0]
#     maxim=lista[0]
#     for elem in lista:
#         if maxim<elem:
#             maxim=elem
#         if minim>elem:
#             minim=elem
#     return minim, maxim
# # print(min_max([4,5,8,9,10,-3]))
#
# #b)
# def incarca_fisier(nume_fisier):
#     f = open(nume_fisier, "r")
#     lista_mare=[]
#     linie=f.readline()
#     while (linie!=''):
#         lista_linie=[int(x) for x in linie.split()]
#         lista_mare.append(lista_linie)
#         linie=f.readline()
#     return lista_mare
#     f.close()
# liste_input=incarca_fisier("input.txt")
# # print(liste_input)
#
# #c)
# g=open("egale.txt", "w")
# nume_fisier_citit=input()
# liste_fisier=incarca_fisier(nume_fisier_citit)
# # print(liste_fisier)
# afisat=False
# for i in range (len(liste_fisier)):
#  for lista in liste_fisier:
#     [minimul,maximul]=min_max(lista)
#     if minimul==maximul:
#         g.write(str(i))
#         afisat=True
# if afisat==False:
#     g.write("nu exista")

#SEMINAR 5
#4 a)
# def suma(n, f=int):
#     s=0
#     for i in range (1, n+1):
#         s+=f(i)
#     return s
# print(suma(10))
# import math
# print(suma(10, math.sqrt))
# def radical(x):
#     return x**0.5
# print(suma(10, f=radical))
#
# #b)
# def suma2(*numere, f=int):
#     s=0
#     for i in numere:
#         s+=f(i)
#     return s
# print(suma2(2,3,4,5))
# ls=[3,1,7]
# print(suma2(*ls))
# # print(suma2(ls))
# from math import sqrt
# print(suma2(4,9,16, f=sqrt))

#5
#a)
# def pozitiv(x):
#     return x>0
# def filtreaza(*numere, functie=None):
#     if functie is None:
#         return list(numere)
#     ls=[]
#     for nr in numere:
#         if functie(nr):
#             ls.append(nr)
#     return ls
#
# a=filtreaza(3,-1,6,8,-3,functie=pozitiv)
# print(a)
# a=filtreaza("ana","are","10","mere",functie=str.isalpha)
# print(a)

#TUTORIAT 4
#ex1
# import functools
# def numar_cifre(a):
#     cifre = 0
#     while a:
#         cifre += 1
#         a //= 10
#     return cifre
#
#
# def comparare(a, b):
#     if numar_cifre(a) < numar_cifre(b):
#         return -1
#     if numar_cifre(a) == numar_cifre(b):
#         return 0
#     if numar_cifre(a) > numar_cifre(b):
#         return 1
#
#
# n = int(input("n="))
# lista = []
# for i in range(n):
#     lista.append(int(input("elem=")))
# lista.sort(key=functools.cmp_to_key(comparare))
# print(lista)

# MODEL TEST DE LABORATOR
# EX1
# A)
# def min_max(lista):
#     min=lista[0]
#     max=lista[0]
#     for i in lista:
#         if i>min:
#             min=i
#         if i<max:
#             max=i
#     return(min, max)
#
# lista=[3,6,7,8,-3]
# print(min_max(lista))
#
# #B)
# def incarca_fisier(nume_fisier):
#     f=open(nume_fisier, "r")
#     lista=[]
#     linie=f.readline()
#     while linie != '':
#         lista_linie=[int(x) for x in linie.split()]
#         lista.append(lista_linie)
#         linie=f.readline()
#     return lista
#     f.close()
#
# a=incarca_fisier("nume_fisier.txt")
# print(a)
#
# #C)
# g=open("egale.txt", "w")
# nume_fisier_citit=input()
# liste_fisier= incarca_fisier(nume_fisier_citit)
# afisat=False
# for i in range (len(liste_fisier)):
#     [minimul, maximul]= min_max(liste_fisier[i])
#     if minimul==maximul:
#         g.write(str(i))
#         afisat=True
# if afisat==False:
#     g.write("nu exista")

#2
#A)
# def deviruseaza(prop):
#     listacuv=prop.split()
#     lista=[]
#     for cuv in listacuv:
#         cuvcorect=cuv[-1]+cuv[1:len(cuv)-1]+cuv[0]
#         lista.append(cuvcorect)
#     lista.reverse()
#     return lista
#
# print(deviruseaza("aorectc aropozitip este aceasta"))
#
# #B)
# def prime(n, numar_maxim=0):
#     lista=[]
#     for i in range(2,n):
#         este_prim = True
#         for d in range(2,i):
#             if i%d==0:
#                 este_prim=False
#                 break
#         if este_prim== True:
#             lista.append(i)
#     if numar_maxim == 0:
#         return lista
#     else:
#         return lista[:numar_maxim]
#
# print(prime(20,5))
#
# #C)
# fin=open("intrare.in", "r")
# fout=open ("intrare_devirusata.out", "w")
# listaprop=[]
# for linie in fin.readline():
#     listaprop.append(linie.strip())
# listaprime=prime(len(listaprop)+1)
# for pos in listaprime:
#     listaprop[pos-1]=deviruseaza(listaprop[pos-1])
# for prop in listaprop:
#     print(prop, file=fout)
#
# fin.close()
# fout.close()

#3)
#A)
# def cifra_control(n):
#     s=n
#     if n<=9:
#         return n
#     while s>9:
#         s=s//10+s%10
#     return s
#
# print(cifra_control(5))
#
# #B)
#
# def insereaza_cifra_control():
#     global l
#     aux=[]
#     for i in l:
#        aux.append(i)
#        aux.append(cifra_control(i))
#     l=[x for x in aux]
#
# l=[1,12,3]
# insereaza_cifra_control()
# print(l)
#
# #C)
# def egale(*elem):
#     for lista in elem:
#         if lista!=elem[0]:
#             return 0
#
#     return 1
#
# print(egale([1,2], [1,2], [1,2]))
#
# #D)
# fin=open("numere.in", "r")
# l=[int(x) for x in fin.read().split()]
# insereaza_cifra_control()
# for i in range (0, len(l), 2):
#     print(l[i], l[i+1], sep=" ")
# fin.close()
#
# #E)
# fin=open("numere.in", "r")
# l1=[int(x) for x in fin.read().split()]
# fin.close()
#
# fin=open("numere2.in", "r")
# l2=[int(x) for x in fin.read().split()]
# fin.close()
#
# set1=set(l1)
# set2=set(l2)
#
# l1=list(set1)
# l2=list(set2)
#
# l1.sort()
# l2.sort()
#
# print(l1,l2)
#
# cif1=[cifra_control(x) for x in l1]
# cif2=[cifra_control(x) for x in l2]
#
# if egale(cif1,cif2):
#     print("da")
# else:
#     print("nu")

#EX4
#A)
# f=open("input.txt", "r")
# dict={}
# for linie in f.readlines():
#     cuv=[cuvinte for cuvinte in linie.split()]
#     if cuv[0] not in dict:
#         dict[cuv[0]]={}
#     if cuv[2] not in dict[cuv[0]]:
#          dict[cuv[0]][cuv[2]]=int(cuv[1])
#     else:
#         dict[cuv[0]][cuv[2]]=dict[cuv[0]][cuv[2]]+int(cuv[1])
# # print(dict)
#
# #B)
# def criteriu(e):
#     return -e[1], e[0]
# def despre_spiridusi(dict, cod):
#     list=[]
#     for jucarie in dict[cod]:
#         list.append((jucarie, dict[cod][jucarie]))
#     list.sort(key=criteriu)
#     return list
#
# # print(despre_spiridusi(dict,"S1"))
#
# #C)
# def jucarii(dict):
#      list=[]
#      for spiridus in dict:
#          for jucarie in dict[spiridus]:
#              if jucarie not in list:
#                  list.append(jucarie)
#      return list
# # print(jucarii(dict))
#
# #D)
# def spiridusi(dict):
#     list=[]
#     for spiridus in dict:
#         nr_tip_juc=len(dict[spiridus])
#         nr_juc=sum([dict[spiridus][x] for x in dict[spiridus]])
#         list.append((spiridus, nr_tip_juc, nr_juc))
#     return sorted(list, key=lambda e: (-e[1], -e[2], e[0]) )
# for x in spiridusi(dict):
#     print(x)
#
# #E)
# def actualizare(dict, cod, juc):
#     if len(dict[cod])>=2:
#         dict[cod].pop(juc)
#         return True
#     else:
#         return False
# print(actualizare(dict, "S1", "trenulet"))
# print(despre_spiridusi(dict, "S1"))

#AL DOILEA TEST DE LABORATOR
#EX 2
#A)
# def modifica_prefix(x,y,prop):
#     nr=0
#     lista=[]
#     for cuv in prop.split():
#         if cuv.startswith(x):
#             cuv_nou=cuv.replace(x,y)
#             nr+=1
#             lista.append(cuv_nou)
#         else:
#             lista.append(cuv)
#     return " ".join(lista), nr
#
# print(modifica_prefix("ma", "al", "marea este mare"))
#
# #B)
# def poz_max(lista):
#     maxim=max(lista)
#     indici=[i+1 for i, x in enumerate(lista) if x==maxim]
#
#     return(maxim, indici)
#
# lista=[4,5,7,5,2,7,5,7]
# print(poz_max(lista))
#
# #C)
#
# ls_modif=[]
# a,b=(i for i in input().split())
# with open("propozitii.in", "r") as fin:
#     with open ("propozitii_modificate.out", "w") as fout:
#        propozitii=[linie for linie in fin.read().split("\n")]
#        for prop in propozitii:
#              print(modifica_prefix(a,b,prop)[0], file=fout)
#              ls_modif.append(modifica_prefix(a,b,prop)[1])
#
# print(poz_max(ls_modif))


#TUTORIAT4+5(DARIA)
# import functools
# def numar_cifre(a):
#     cifre = 0
#     while a:
#         cifre += 1
#         a //= 10
#     return cifre
#
#
# def comparare(a, b):
#     if numar_cifre(a) < numar_cifre(b):
#         return -1
#     if numar_cifre(a) == numar_cifre(b):
#         return 0
#     if numar_cifre(a) > numar_cifre(b):
#         return 1
#
#
# n = int(input("n="))
# lista = []
# for i in range(n):
#     lista.append(int(input("elem=")))
# lista.sort(key=functools.cmp_to_key(comparare))
# print(lista)

#1)
#A)
# def citire_matrice(fis):
#    f=open("matrice.in", "r")
#    s=f.readline()
#    lista=[x for x in s.split()]
#    nr=[]
#    matrice=[]
#    while s:
#        ls=[]
#        ls=s.split()
#        matrice.append(ls)
#        nr.append(len(ls))
#        s=f.readline()
#    f.close()
#    ok=1
#    for i in range(len(nr)):
#        for j in range (len(nr)):
#            if nr[i]!=nr[j]:
#                ok=0
#                break
#    if ok==1:
#        return(matrice)
#    else:
#        return (None)
#
# print(citire_matrice("matrice.in"))
#
# #B)
# def multimi(matrice, *indici):
#     reuniune=set()
#     intersectie=set()
#     nr=0
#     for elem in indici:
#         multneg={}
#         multpoz={}
#         multneg={int(x) for x in matrice[elem] if int(x)<0}
#         multpoz={int(x) for x in matrice[elem] if x[0]==x[len(x)-1]}
#         if nr==0:
#             intersectie =  multneg
#         else:
#             intersectie = intersectie & multneg
#         reuniune=reuniune | multpoz
#         nr+=1
#
#     return(intersectie, reuniune)
#
# matrice=citire_matrice("matrice.in")
# print(multimi(matrice,0,1,2,3))
#
# #C)
# f=citire_matrice("matrice.in")
# neg, poz =multimi(f, 1,2,3)
# print(poz)
# neg, poz=multimi(f, 0,3)
# print(len(neg))

# 3)
# ls=[]
# dict1={}
# dict2={}
# with open ('autori.in') as f:
#     linie=f.readline()
#     linie=linie.split()
#     m=int(linie[0])
#     n=int(linie[1])
#     for i in range(m):
#         linie=f.readline()
#         linie=linie.split(maxsplit=1)
#         cod_autor=linie[0]
#         nume_autor=linie[1].rstrip('\n')
#         dict1[cod_autor]=nume_autor
#     for i in range(n):
#         linie = f.readline()
#         linie = linie.split(maxsplit=2)
#         cod_autor=linie[0]
#         cod_carte=linie[1]
#         informatii=linie[2].rstrip('\n')
#         informatii=informatii.split()
#         val=[]
#         val.append(cod_autor)
#         val.append(informatii)
#         dict2[cod_carte]=val
#     ls.append(dict1)
#     ls.append(dict2)
# print(ls)
# """
# b)Să se scrie o funcție sterge_carte cu 2 parametri: în primul parametru se
# transmite structura în care s-au memorat datele la cerința a), iar al doilea este codul unei
# cărți, care șterge din structura de date primită toate informațiile legate de cartea cu codul
# dat ca parametru. Funcția returnează numele unicului autor al cărții cu codul dat,
# sau None dacă acea carte nu s-a găsit.
# """
# #cod=int(input())
# def sterge_carte(ls, cod):
#   for key in dict2.keys():
#       cheie=int(key)
#       if cheie==cod:
#           cod_autor=dict2[key][0]
#           dict2.pop(key)
#           return dict1[cod_autor]
#   return None
# raspuns=sterge_carte(ls, 111)
# if raspuns!=None:
#     print(raspuns)
# else:
#     print("Cartea nu exista")

#TUTORIAT 10(DARIA)
#1)
# A)
# def modifica_litera(p, x, y, prop):
#     words = prop.split()
#     words_modified = 0
#     for i in range(len(words)):
#         if len(words[i]) >= p and words[i][p-1] == x:
#             words[i] = words[i][:p-1] + y + words[i][p:]
#             words_modified += 1
#     prop_modified = " ".join(words)
#     return prop_modified, len(words) - words_modified
#
#
# p = 2
# x = 'n'
# y = 'm'
# prop = "ana ane mere ane"
# print(modifica_litera(p, x, y, prop))
# prop_m, number = modifica_litera(p, x, y, prop)
#
# #B)
# def poz_x(lista,x):
#     list=[]
#     s=len(lista)
#     for i in range(s):
#         if lista[i]==x:
#             list.append(i+1)
#     return(list)
#
# lista=[2,3,3,4,2,3]
# x=3
# print(poz_x(lista,x))
#
# #C)
# f=open("propozitii.in", "r")
# g=open("propozitii.out", "w")
# p,x,y=input("val date:").split()
# p=int(p)
# c=[]
# for line in f:
#      new_line=line.rstrip("\n")
#      prop_modif, numar=modifica_litera(p, x, y, new_line)
#      g.write(prop_modif+ "\n")
#      c.append(len(new_line.split())-numar)
# poz_unmod=poz_x(c,0)
# print(poz_unmod)
# f.close()
# g.close()

# from math import log
# lista = [1/3,1/3,1/3]
# h = 0
# for procent in lista:
#     h += procent * log(1/procent,2)
# print(h)

# MODEL EXAMEN SCRIS
# a) Scrieți o funcție litere care primește un număr variabil de cuvinte formate doar din litere mici
# și returnează un dicționar care conține, pentru fiecare cuvânt primit ca parametru, un dicționar
# conținând frecvențele literelor distincte din cuvântul respectiv sub forma unei perechi cuvânt:
# {litere: frecvențe}. De exemplu, pentru apelul litere("teste", "programare") funcția trebuie să
# furnizeze dicționarul {'teste': {'e': 2, 't': 2, 's': 1}, 'programare': {'g': 1, 'a': 2, 'm': 1, 'e': 1, 'o': 1, 'p':
# 1, 'r': 3}}. (1.5 p.)

# def litere(*cuvinte):
#     d=dict()
#     for cuv in cuvinte:
#         dd=dict()
#         for litere in range(26):
#             c=chr(litere+ord('a'))
#             nr=cuv.count(c)
#             if nr>0:
#                 dd[c]=nr
#         d[cuv]=dd
#     return d
#
# print(litere("teste", "programare"))

# b) Înlocuiți punctele de suspensie din instrucțiunea numere = […] cu o secvență de inițializare (list
# comprehension) astfel încât, după executarea sa, lista să conțină numerele naturale formate din
# exact două cifre care sunt divizibile cu 2, dar nu sunt divizibile cu 6.

# numere=[int(x) for x in range(10,100) if x%2==0 and x%6!=0]
# print(numere)

# a) După o lungă plimbare prin parc cu stăpâna sa, cățelușa Laika se află în fața unei mari
# provocări: trebuie să urce cele n trepte (1 ≤ 𝑛𝑛 ≤ 50) până la ușa apartamentului în care
# locuiește. Din cauza oboselii, Laika poate să sară, de fiecare dată, peste un număr de trepte
# cuprins între 1 și 𝑡𝑡 (1 ≤ 𝑡𝑡 ≤ 𝑛𝑛). Fiind foarte curioasă, cățelușa Laika se gândește cum ar
# putea să afle toate modalitățile în care ar putea să urce cele n trepte. Ajutați-o pe Laika,
# scriindu-i un program Python care să citească de la tastatură numerele naturale 𝑛𝑛 și 𝑡𝑡,
# după care să-i afișeze toate modalitățile corecte de urcare (evident, Laika știe să citească)
# și numărul acestora!

# n=5
# t=3
# x=[0 for i in range(n)]
# count=0
# def back(k):
#     global count
#     if sum(x[:k]) ==n:
#         count+=1
#         print(*x[:k])
#     else:
#         for i in range(1,t+1):
#             x[k]=i
#             if sum(x[:k+1]) <=n:
#                 back(k+1)
#
# back(0)
# print(count)


# 4)
# a) În seria 131415 sunt nrf studente (1 ≤ 𝑛𝑛𝑛𝑛𝑛𝑛 ≤ 30), identificate prin numerele naturale
# de la 1 la nrf, și nrb studenți (1 ≤ 𝑛𝑛𝑛𝑛𝑛𝑛 ≤ 30), identificați prin numerele naturale de la
# nrf+1 la nrf+nrb. Scrieți un program Python care să citească de la tastatură 3 numere
# naturale 𝑛𝑛𝑛𝑛𝑛𝑛, 𝑛𝑛𝑛𝑛𝑛𝑛 și 𝑠𝑠, după care să afișeze toate grupele formate din exact s studenți și
# studente (s este un număr par cuprins între 2 și 100) cu proprietatea că numărul
# studentelor din grupă este egal cu cel al studenților sau un mesaj corespunzător dacă nu
# se poate forma nicio grupă cu proprietățile cerute. (2.5 p.)
# Exemplu:
# Pentru 𝑛𝑛𝑛𝑛𝑛𝑛 = 4, 𝑛𝑛𝑛𝑛𝑛𝑛 = 3, 𝑠𝑠 = 4 se pot forma corect următoarele grupe:
# 1, 2, 5, 6
# 1, 2, 5, 7
# 1, 2, 6, 7
# 1, 3, 5, 6
# 1, 3, 5, 7
# 1, 3, 6, 7
# 1, 4, 5, 6
# 1, 4, 5, 7
# 1, 4, 6, 7
# 2, 3, 5, 6
# 2, 3, 5, 7
# 2, 3, 6, 7
# 2, 4, 5, 6
# 2, 4, 5, 7
# 2, 4, 6, 7
# 3, 4, 5, 6
# 3, 4, 5, 7
# 3, 4, 6, 7

# nrf=int(input())
# nrb=int(input())
# s=int(input())
# x=[0 for i in range(s+1)]
# n=nrf+nrb
# fete=0
# baieti=0
# def back(k):
#     global fete, baieti, ok
#     if k==s+1:
#         if fete==baieti:
#             print(*x[i:k], sep=',')
#             ok=1
#         else:
#             for i in range(x[k-1], n+1):
#                 x[k]=i
#                 if i<=nrf:
#                     fete+=1
#                 else:
#                     baieti+=1
#                 if x[k] not in x[:k] and fete<=s//2 and baieti<=s//2:
#                     back(k+1)
#                 if i<=nrf:
#                     fete-=1
#                 else:
#                     baieti-=1
#     if ok == 0:
#         print("imposibil")
#     back(1)



# b) Precizați unde ar trebui inserată în program o singură instrucțiune astfel încât să
# afișeze doar grupele din care fac parte prima studentă (identificată prin 1) și primul
# student (identificat prin 𝑛𝑛𝑛𝑛𝑛𝑛+1), precum și instrucțiunea respectivă. Pentru exemplul
# anterior, aceste soluții sunt cele scrise cu roșu.

# if k>=1 and k<=s//2 and 1 in x:
#     back(k+1)
# else:
#     if k>=s//2+1 and 1 in x and nrf+1 in x:
#         back(k+1)




# MODEL EXAMEN SCRIS

# Scrieți o funcție frecvențe care primește un număr variabil de liste formate din numere întregi
# și returnează un dicționar cu perechi de forma frecvență: lista valori conținând toate frecvențele
# distincte ale tuturor elementelor tuturor listelor, precum și câte o listă cu elementele care au
# frecvența respectivă. De exemplu, pentru apelul frecvente([20, 10, 40, 20], [10, 20, 10], [40, 30,
# 40]) funcția trebuie să furnizeze dicționarul {3: [20, 10, 40], 1: [30]}.

#A)
# def frecvente(*liste):
#     lista=[]
#     d={}
#     for l in liste:
#         lista.extend(l)
#     for elem in set(lista):
#         if lista.count(elem) not in d:
#             d[lista.count(elem)]=[elem]
#         else:
#             d[lista.count(elem)].append(elem)
#     return d
#
# L=[[20,10,40,20], [10,20,10], [40,30,40]]
# print(frecvente(*L))

# b) Înlocuiți punctele de suspensie din instrucțiunea tupluri = […] cu o secvență de inițializare (list
# comprehension) astfel încât, după executarea sa, lista să conțină pentru fiecare număr cuprins
# între 1 și 20 cu proprietatea că restul împărțirii sale la 6 este diferit de câtul împărțirii sale la 6
# câte un tuplu format din numărul respectiv, câtul și restul împărțirii sale la 6.

# tupluri=[int(x) for x in range(1,21) if x//6 != x%6]
# print(tupluri)

# 3) Pentru două cuvinte x și y formate doar din litere mici spunem că x este în relație cu y
# dacă ultima literă din x este alăturată (consecutivă) în alfabet cu prima literă din y (litera
# 'a' este alăturată literei 'b', litera 'b' este alăturată literelor 'a' și 'c' etc). Scrieți un
# program Python care să rezolve următoarea cerință:
# Se citesc de la tastatură un număr natural n și un șir de n cuvinte formate doar cu litere
# mici ale alfabetului englez, date pe o singură linie și separate între ele prin câte un spațiu.
# Să se elimine din șir un număr minim de cuvinte astfel încât șirul rămas să verifice
# următoarea proprietate: orice cuvânt din șir, cu excepția ultimului, este în relație cu
# următorul cuvânt din șir. Se vor afișa pe ecran cuvintele eliminate. În plus, determinați
# dacă soluția optimă este unică și afișați un mesaj corespunzător.

# n=7
# sir="casa apa bun bine fila dop orar"
# lista=[s for s in sir.split()]
# pred=[[-1]]*n
# lung=[1]*n
# for i in range(0,n):
#     for j in range(0,i):
#         x=lista[i][0]
#         y=lista[j][len(lista[j])-1]
#         if abs(ord(x)-ord(y))==1 and lung[j]+1>=lung[i]:
#             if lung[i]<lung[j]+1:
#                 lung[i]=lung[j]+1
#                 pred[i]=[j]
#             else:
#                 pred[i].append(j)
#
# maxim=max(lung)
# poz=lung.index(maxim)
# sol=[lista[poz]]
# ok=0
# i=pred[poz][0]
# k=maxim-1
# while k>0:
#     if len(pred[i])>1:
#         ok=1
#     sol.append(lista[i])
#     i=pred[i][0]
#     k-=1
#
# print(sol)
# for cuv in lista:
#     if cuv not in sol:
#         print(cuv,end=" ")
# if ok==1 or lung.count(maxim)>1:
# 	print("\nsolutia nu este unica")
# else:
#     print("\nsolutie unica")

# MODEL EXAMEN

# 4) Să se afișeze toate permutările mulțimii A = {1,2, ..., n}, unde n este un număr natural nenul
# def back2(k):
#     if k == n:
#         print(*x)
#     else:
#         for i in range(1, n + 1):
#             x[k] = i
#             if v[x[k]]==0:
#                 v[x[k]]  = 1
#                 back2(k + 1)
#                 v[x[k]] = 0
# n=5
# x = [0 for i in range(n)]
# v = [0 for i in range(n+1)]
# back2(0)

# 1) a) Scrieți o funcție divizori care primește un număr variabil de parametri numere naturale și
# returnează pentru fiecare număr primit ca parametru lista divizorilor săi primi sub forma unui
# dicționar cu perechi de forma număr: lista divizorilor. De exemplu, pentru apelul divizori(50, 21)
# funcția trebuie să furnizeze dicționarul {50: [2,5], 21: [3,7]}. (1.5 p.)

# def divizori(*numere):
#     d=dict()
#     lista=[]
#     for nr in numere:
#         for d in range(2, nr//2+1):
#             if nr%d==0:
#                 break
#         lista.append(d)
#     d[nr]=lista
#     return d
#
# print(divizori(50,21))

# b) Înlocuiți punctele de suspensie din instrucțiunea litere_10 = […] cu o expresie astfel încât lista
# să fie inițializată cu primele 10 litere mici din alfabetul englez.

# litere_10=[chr]

// impartirea a doua numere
.data
x: .long 30
y: .long 4
cat: .space 4
rest: .space 4
.text

.global main

main:
movl $0, %edx
// divl op <- (edx, eax) <- eax / op
movl x, %eax
divl y

movl %eax, cat
movl %edx, rest
et_exit:
movl $1, %eax
movl $0, %ebx
int $0x80




// suma elementelor dintr-un array
.data
n: .long 5
v: .long 4, 5, 9, 2, 11
.text

.global main

main:
movl $v, %edi # incarc adresa lui v in %edi
movl $0, %eax # eax este suma curenta
movl $0, %ecx # ecx este indexul din array
et_for:
cmp n, %ecx
je et_exit

movl (%edi, %ecx, 4), %ebx # edi + ecx * 4
addl %ebx, %eax

incl %ecx
jmp et_for

et_exit:
movl $1, %eax
movl $0, %ebx
int $0x80

// for (ecx = 0; ecx < n; ecx++)
// {
// eax += edi[ecx]
// }





Se citeste de la tastatura un numar natural x. Sa se implementeze procedura este_par, care returneaza prin intermediul reg. %eax valoarea 1 daca x este par, respectiv valoarea 0 daca x este impar. Se va afisa pe ecran un mesaj corespunzator. ("Numarul %d este par", respectiv "Numarul %d este impar")

.data

x: .space 4

formatScanf: .asciz "%d"
formatPar: .asciz "Numarul %d este par\n"
formatImpar: .asciz "Numarul %d este impar\n"

.text

.global main


estePar:

    pushl %ebp 
    movl %esp, %ebp
    movl 8(%ebp), %eax
    andl $0x01, %eax
    xorl $0x01, %eax    
    popl %ebp
    ret



main:

pushl $x
pushl $formatScanf
call scanf
popl %ebx
popl %ebx



pushl x
call estePar
popl %ebx


cmp $0x01, %eax
je et_WritePar
jne et_WriteImpar

et_exit:

movl $0x01, %eax
xorl %ebx, %ebx
int $0x80

et_WritePar:
    pushl x
    pushl $formatPar
    call printf
    popl %ebx
    popl %ebx
    jmp et_exit

et_WriteImpar:
    pushl x
    pushl $formatImpar
    call printf
    popl %ebx
    popl %ebx
    jmp et_exit
    
    
    
    
    
// suma a doua numere prin procedura
// eax = suma(x, y)
// citim x si y de la tastatura
// calculam prin procedura suma dintre x si y
// si afisam suma respectiva pe ecran

.data
x: .space 4
y: .space 4

formatScanf: .asciz "%d"
formatPrintf: .asciz "Suma este: %d\n"
.text

.global main

suma:
// %esp:(<adr de in>)(x)(y)
// conventia %ebp: se pregateste restaurarea
// se face %ebp pointer in cadrul de apel
pushl %ebp
// %esp:(%ebp v)(<adr de in>)(x)(y)
movl %esp, %ebp
// %esp:%ebp:(%ebp v)(<adr de in>)(x)(y)
// incarc primul arg in %eax
// si pe al doilea in %ebx

pushl %ebx
// %esp:(%ebx v)%ebp:(%ebp v)(<adr de in>)(x)(y)
movl 8(%ebp), %eax
movl 12(%ebp), %ebx

addl %ebx, %eax
// %eax += %ebx

popl %ebx
// %esp:%ebp:(%ebp v)(<adr de in>)(x)(y)
popl %ebp
// %esp:(<adr de in>)(x)(y)
ret

main:
// scanf("%d", &x)
pushl $x
pushl $formatScanf
call scanf
popl %ebx
popl %ebx

// scanf("%d", &y)
pushl $y
pushl $formatScanf
call scanf
popl %ebx
popl %ebx

// suma(x, y)
pushl y
pushl x
call suma
popl %ebx # <<--
popl %ebx

// in momentul asta, rezultatul este in %eax
// printf("Suma este: %d\n", eax);
pushl %eax
pushl $formatPrintf
call printf
popl %ebx
popl %ebx

exit:
movl $1, %eax
xorl %ebx, %ebx
int $0x80





[16:38, 30.05.2022] Roberta: // sa se scrie o procedura care primeste adresa unui array si dimensiunea acestuia
// si returneaza in %eax de cate ori apare elementul maxim in array
// %eax = countmax(*v, n)


.data
v: .long 3, 15, 42, 11, 42, 8, 42
n: .long 7
formatPrintf: .asciz "Elementul maxim apare de %d ori\n"
.text

.global main

countmax:
pushl %ebp
movl %esp, %ebp

// %esp:%ebp:(%ebp v)(<adr de in>)(*v)(n)

pushl %edi
// %esp:(%edi v)%ebp:(%ebp v)(<adr de in>)(*v)(n)
movl 8(%ebp), %edi
movl 12(%ebp), %edx

pushl %ebx
// %esp:(%ebx v)(%edi v)%ebp:(%ebp v)(<adr de in>)(*v)(n)

pushl %edx # n
pushl %edi # *v
call maxim
popl %edi
popl %edx

// in momentul acesta, am in %eax elementul maxim din array
pushl %esi
// %esp:(%esi v)(%ebx v)(%edi v)%ebp:(%ebp v)(<adr de in>)(*v)(n)
movl %eaâ€¦
[16:38, 30.05.2022] Roberta: // sa se scrie o procedura care primeste adresa unui array si dimensiunea acestuia
// si returneaza in %eax elementul maxim
// %eax = maxim(*v, n)

.data
v: .long 3, 15, 27, 11, 42, 8, 35
n: .long 7
formatPrintf: .asciz "Elementul maxim din array este %d\n"
.text

.global main
// %ebx, %esi, %edi, %ebp, %esp
maxim:
// %esp:(<adr de in>)(*v)(n)
pushl %ebp
movl %esp, %ebp
// %esp:%ebp:(%ebp v)(<adr de in>)(*v)(n)

pushl %edi
// %esp:(%edi v)%ebp:(%ebp v)(<adr de in>)(*v)(n)
movl 8(%ebp), %edi # adresa array-ului
movl 12(%ebp), %edx # dimensiunea array-ului

xorl %ecx, %ecx # pe post de "i"
movl (%edi, %ecx, 4), %eax # eax = v[0]
incl %ecx

pushl %ebx
// %esp:(%ebx v)(%edi v)%ebp:(%ebp v)(<adr de in>)(*v)(n)
maxim_for:
// for (ecx = 1; ecx < edx; ecx++) { if (v[i] > eax) { eax = v[i] } }
cmp %edx, %ecx
je maxim_exit

movl (%edi, %ecx, 4), %ebx
cmp %eax, %ebx
jg change_max

maxim_cont:
incl %ecx
jmp maxim_for

change_max:
movl %ebx, %eax
jmp maxim_cont

maxim_exit:
popl %ebx
popl %edi
popl %ebp
ret

main:
pushl n
pushl $v
call maxim
popl %ebx
popl %ebx

// printf("Elementul maxim ...", eax)
pushl %eax
pushl $formatPrintf
call printf
popl %ebx
popl %ebx

et_exit:
movl $1, %eax
xorl %ebx, %ebx
int $0x80





// sa se scrie o procedura recursiva care sa calculeze suma elementelor
// de la n la 0
// suma_rec(5) = 5 + 4 + 3 + 2 + 1 + 0
// suma_rec(0) este cazul de oprire
// altfel, apelez suma_rec(n - 1)
.data
n: .long 5
formatPrintf: .asciz "Suma este %d\n"
.text

.global main

suma_rec:
pushl %ebp
movl %esp, %ebp
// %esp:%ebp:(%ebp v)(<adr de in>)(n)

movl 8(%ebp), %ecx
cmp $0, %ecx
je suma_rec_exit

addl %ecx, %eax

sub $1, %ecx
pushl %ecx
call suma_rec
popl %ecx

suma_rec_exit:
popl %ebp
ret

main:
xorl %eax, %eax

pushl n
call suma_rec
popl %ebx

pushl %eax
pushl $formatPrintf
call printf
popl %ebx
popl %ebx

et_exit:
movl $1, %eax
xorl %ebx, %ebx
int $0x80

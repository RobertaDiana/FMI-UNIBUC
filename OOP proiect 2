#include <iostream>
#include <vector>
#include <string>
using namespace std;

//interfata
//interfata contine doar metode virtuale pure
class IOInterface
{
public:
    //virtualizarea citirii
    virtual istream& citire(istream& in)=0;
    //const inseamna ca metoda o sa fie const pe tot parcursul apelului
    virtual ostream& afisare(ostream& out) const=0;
};

class Restaurant: public IOInterface
{
protected:
    string numeRestaurant;
    string locatie;
    string numeProprietar;
    struct Data
    {
        int an;
        int luna;
    } dataDeschidere;
public:

    //constructor cu toti parametri scris
    Restaurant(string numeRestaurant, string locatie, int luna, int an, string numeProprietar)
    {
        this->numeRestaurant=numeRestaurant;
        this->locatie=locatie;
        this->dataDeschidere.an=an;
        this->dataDeschidere.luna=luna;
        this->numeProprietar=numeProprietar;
    }

//constructor fara parametri scris
    Restaurant()
    {
        this->numeRestaurant="Nuba";
        this->locatie="Bucuresti";
        this->dataDeschidere.an=0;
        this->dataDeschidere.luna=0;
        this->numeProprietar="Roberta";
    }

//copy constructor scris
    Restaurant(const Restaurant& restaurant)
    {
        this->numeRestaurant=restaurant.numeRestaurant;
        this->locatie=restaurant.locatie;
        this->dataDeschidere.an=restaurant.dataDeschidere.an;
        this->dataDeschidere.luna=restaurant.dataDeschidere.luna;
        this->numeProprietar=restaurant.numeProprietar;
    }

//supraincarcarea operatorului =
    Restaurant& operator = (const Restaurant& restaurant)
    {
        if (this!=&restaurant)
        {
            this->numeRestaurant=restaurant.numeRestaurant;
            this->locatie=restaurant.locatie;
            this->dataDeschidere.an=restaurant.dataDeschidere.an;
            this->dataDeschidere.luna=restaurant.dataDeschidere.luna;
            this->numeProprietar=restaurant.numeProprietar;
        }
        return *this;
    }

//citire
    virtual istream& citire(istream& in)
    {
        cout<<"Numele restaurantului este: ";
        in>>this->numeRestaurant;
        cout<<"Locatia restaurantului este: ";
        in>>this->locatie;
        cout<<"Data deschiderii este:\n";
        cout<<"An: ";
        in>>this->dataDeschidere.an;
        cout<<"Luna: ";
        in>>this->dataDeschidere.luna;
        cout<<"Numele proprietarului este: ";
        in>>this->numeProprietar;

        return in;
    }

//afisare
    virtual ostream& afisare(ostream& out) const
    {
        out<<"Numele restaurantului este: "<<this->numeRestaurant<<endl;
        out<<"Locatia restaurantului este: "<<this->locatie<<endl;
        out<<"Data deschiderii este: "<<this->dataDeschidere.luna<<"/"<<this->dataDeschidere.an<<endl;
        out<<"Numele proprietarului este: "<<this->numeProprietar<<endl;

        return out;
    }

    //supraincarcarea operatorului >>
    friend istream& operator >> (istream& in, Restaurant& p)
    {
        return p.citire(in);
    }

//supraincarcarea operatorului <<
    friend ostream& operator << (ostream& out, const Restaurant& p)
    {
        return p.afisare(out);
    }

    //setters
    void setNumeRestaurant (string numeRestaurant)
    {
        this->numeRestaurant=numeRestaurant;
    }
    void setLocatie (string locatie)
    {
        this->locatie=locatie;
    }
    void setDataDeschidere (int luna, int an)
    {
        this->dataDeschidere.luna=luna;
        this->dataDeschidere.an=an;
    }
    void setNumeProprietar (string numeProprietar)
    {
        this->numeProprietar=numeProprietar;
    }

    //getters
    string getNumeRestaurant()
    {
        return this->numeRestaurant;
    }
    string getLocatie()
    {
        return this->locatie;
    }
    Data getDataDeschidere()
    {
        return this->dataDeschidere;
    }
    string getNumeProprietar()
    {
        return this->numeProprietar;
    }

    //functionalitate
    virtual void amanaDeschidere(int luniAmanate);
    virtual void aniProprietar()
    {
        cout<<"nu este proprietar\n ";
    };
    virtual void pensionareAngajat()
    {
        cout<<"nu este angajat\n";
    };
    virtual void preturiRezervare()
    {
        cout<<"nu e rezervare\n";
    };
    //destructor
    virtual ~Restaurant()
    {
    }
};

//functionalitate
void Restaurant::amanaDeschidere(int luniAmanate)
{
    dataDeschidere.luna+=luniAmanate;
    while (dataDeschidere.luna>12)
    {
        dataDeschidere.luna-=12;
        dataDeschidere.an++;
    }
}
//mostenire
class Proprietar:virtual public Restaurant
{
private:
    int varsta;
public:

    //constructor cu toti parametrii
    Proprietar( string numeRestaurant, string locatie, int luna, int an, string numeProprietar, int varsta) :Restaurant(numeRestaurant, locatie, luna, an, numeProprietar)
    {
        this->varsta=varsta;
    }

    //constructor fara parametri
    Proprietar():Restaurant()
    {
        this->varsta=30;
    }

    //copy-constructor
    Proprietar(const Proprietar& p):Restaurant(p)
    {
        this->varsta=p.varsta;
    }

    //operator =
    Proprietar& operator=(const Proprietar& p)
    {
        if (this!=&p)
        {
            Restaurant::operator=(p);
            this->varsta=p.varsta;
        }
        return *this;
    }

    //citire
    virtual istream& citire(istream& in)
    {
        Restaurant::citire(in);
        cout<<"Varsta proprietarului este: ";
        in>>this->varsta;
        return in;
    }

    //afisare
    virtual ostream& afisare(ostream& out) const
    {
        Restaurant::afisare(out);
        out<<"Varsta proprietarului este: "<<this->varsta<<endl;
        return out;
    }

    //setters
    void setVarsta (int varsta)
    {
        this->varsta=varsta;
    }

    //getters

    int getVarsta()
    {
        return this->varsta;
    }

    //functionalitate
    void aniProprietar();

};

void Proprietar::aniProprietar()
{
    if (this->varsta<50)
        cout<<"Proprietar tanar\n";
    else
        cout<<"Proprietar in varsta\n";
}

class Rezervare:virtual public Restaurant
{
private:
    string oraRezervarii;
public:

    //constructor cu toti parametrii
    Rezervare(string numeRestaurant, string locatie, int luna, int an, string numeProprietar, string oraRezervarii):Restaurant(numeRestaurant, locatie, luna, an, numeProprietar)
    {
        this->oraRezervarii=oraRezervarii;
    }

    //constructor fara parametri
    Rezervare():Restaurant()
    {
        this->oraRezervarii="";
    }

    //copy-constructor
    Rezervare(const Rezervare& p):Restaurant(p)
    {
        this->oraRezervarii=p.oraRezervarii;
    }

    //operator =
    Rezervare& operator = (const Rezervare& p)
    {
        if (this!=&p)
        {
            Restaurant::operator=(p);
            this->oraRezervarii=p.oraRezervarii;
        }
        return *this;
    }

    //citire
    virtual istream& citire(istream& in)
    {
        Restaurant::citire(in);
        cout<<"Ora rezervarii este: ";
        in>>this->oraRezervarii;

        return in;
    }

    //afisare
    virtual ostream& afisare(ostream& out) const
    {
        Restaurant::afisare(out);
        out<<"Ora rezervarii este: "<<this->oraRezervarii<<endl;
        return out;
    }

    //setters
    void setOraRezervarii(string oraRezervarii)
    {
        this->oraRezervarii=oraRezervarii;
    }

    //getters
    string getOraRezervarii()
    {
        return this->oraRezervarii;
    }

    //functionalitate
    void preturiRezervare();
};

//functionalitate
void Rezervare::preturiRezervare ()
{
    if (stoi(this->oraRezervarii.substr(0,2))>19)
        cout<<"Rezervare scumpa\n ";
    else
        cout<<"Rezervare ieftina\n ";
}

class Angajat: virtual public Restaurant
{
private:
    string numeAngajat;
    int varstaAngajat;
public:
    //constructor cu toti parametrii
    Angajat(string numeRestaurant, string locatie, int luna, int an, string numeProprietar, string numeAngajat, int varstaAngajat):Restaurant(numeRestaurant, locatie, luna, an, numeProprietar)
    {
        this->numeAngajat=numeAngajat;
        this->varstaAngajat=varstaAngajat;
    }

    //constructor fara parametrii
    Angajat():Restaurant()
    {
        this->numeAngajat="bla";
        this->varstaAngajat=18;
    }

    //copy-constructor
    Angajat (const Angajat& p):Restaurant(p)
    {
        this->numeAngajat=p.numeAngajat;
    }

    //operator =
    Angajat& operator=(const Angajat& p)
    {
        if (this!=&p)
        {
            Restaurant::operator=(p);
            this->numeAngajat=p.numeAngajat;
            this->varstaAngajat=p.varstaAngajat;
        }
        return *this;
    }

    //citire
    virtual istream& citire(istream& in)
    {
        Restaurant::citire(in);
        cout<<"Numele angajatului este: ";
        in>>this->numeAngajat;
        cout<<"Varsta angajutului este: ";
        in>>this->varstaAngajat;
        return in;
    }

    //afisare
    virtual ostream& afisare(ostream& out) const
    {
        Restaurant::afisare(out);
        out<<"Numele angajatului este: "<<this->numeAngajat<<endl;
        out<<"Varsta angajatului este: "<<this->varstaAngajat<<endl;
        return out;
    }

    //setters
    void setNumeAngajat (string numeAngajat)
    {
        this->numeAngajat=numeAngajat;
    }
    void setVarstaAngajat (int varstaAngajat)
    {
        this->varstaAngajat=varstaAngajat;
    }


    //getters
    string getNumeAngajat()
    {
        return this->numeAngajat;
    }
    int getVarstaAngajat()
    {
        return this->varstaAngajat;
    }

    //functionalitate
    void pensionareAngajat();
};

//functionalitate
void Angajat::pensionareAngajat()
{
    if (this->varstaAngajat>55)
        cout<<"E timpul pentru pensionare\n ";
    else
        cout<<"E bun de munca\n";
}

//din proiect 1
class Livrare
{
private:
    string numeCurier;
    string firmaCurier;
    string dataLivrarii;
    double pret;

public:
    //constructor cu toti parametrii
    Livrare(string numeCurier, string firmaCurier, string dataLivrarii, double pret);

    //constructor fara parametri
    Livrare();

    //copy constructor
    Livrare(const Livrare& livrare);

    //supraincarcarea operatorului >>
    friend istream& operator >> (istream& in, Livrare&);

    //supraincarcarea operatorului <<
    friend ostream& operator << (ostream& out, const Livrare&);

    //supraincarcarea operatorului =
    Livrare& operator = (const Livrare& livrare);

    //functionalitate
    void preturifirma();

    //setters
    void setNumeCurier(string numeCurier)
    {
        this->numeCurier=numeCurier;
    }
    void setFirmaCurier(string firmaCurier)
    {
        this->firmaCurier=firmaCurier;
    }
    void setDataLivrarii(string dataLivrarii)
    {
        this->dataLivrarii=dataLivrarii;
    }
    void setPret(double pret)
    {
        this->pret=pret;
    }

    //getters
    string getNumeCurier()
    {
        return this->numeCurier;
    }
    string getFirmaCurier()
    {
        return this->firmaCurier;
    }
    string getDataLivrarii()
    {
        return this->dataLivrarii;
    }
    double getPret()
    {
        return this->pret;
    }

    //destructor
    ~Livrare();

};

//constructor cu toti parametrii
Livrare::Livrare(string numeCurier, string firmaCurier, string dataLivrarii, double pret)
{
    this->numeCurier=numeCurier;
    this->firmaCurier=firmaCurier;
    this->dataLivrarii=dataLivrarii;
    this->pret=pret;
}

//constructor fara parametri
Livrare::Livrare()
{
    this->numeCurier="Popescu";
    this->firmaCurier="Fan Curier";
    this->dataLivrarii=20.2020;
    this->pret=15;
}

//copy-constructor
Livrare::Livrare(const Livrare& livrare)
{
    this->numeCurier=livrare.numeCurier;
    this->firmaCurier=livrare.firmaCurier;
    this->dataLivrarii=livrare.dataLivrarii;
    this->pret=livrare.pret;
}

//supraincarcarea operatorului >>
istream& operator>> (istream& in, Livrare& p)
{
    cout<<"Numele curierului este: ";
    getline(in>>ws, p.numeCurier);
    cout<<"Firma de curierat este: ";
    getline(in>>ws, p.firmaCurier);
    cout<<"Data livrarii este: ";
    in>>p.dataLivrarii;
    cout<<"Pretul livrarii este: ";
    in>>p.pret;

    return in;
}

//supraincarcarea operatorului <<
ostream& operator << (ostream& out, const Livrare& p)
{
    out<<"Numele curierului este: "<<p.numeCurier<<endl;
    out<<"Firma de curierat este: "<<p.firmaCurier<<endl;
    out<<"Data livrarii este: "<<p.dataLivrarii<<endl;
    out<<"Pretul este: "<<p.pret<<endl;

    return out;
}

//supraincarcarea operatorului =
Livrare& Livrare::operator =(const Livrare& livrare)
{
    if (this!=&livrare)
    {
        this->numeCurier=livrare.numeCurier;
        this->firmaCurier=livrare.firmaCurier;
        this->dataLivrarii=livrare.dataLivrarii;
        this->pret=livrare.pret;
    }
    return *this;
}

//functionalitate
void Livrare::preturifirma()
{
    if (this->pret>=100)
        cout<<"comanda mare\n";
    else
        cout<<"comanda mica\n";
}

//destructor
Livrare::~Livrare()
{
    this->numeCurier="";
    this->firmaCurier="";
    this->dataLivrarii="";
    this->pret=0;
}


int main()
{
    vector<Restaurant*> listaRestaurante;
    vector<Livrare*> listaLivrari;

    while (true)
    {
        int inputValue;
        cout << "Apasa 0 ca sa adaugi un restaurant\n";
        cout << "Apasa 1 ca sa adaugi un proprietar\n";
        cout << "Apasa 2 ca sa adaugi un angajat\n";
        cout << "Apasa 3 ca sa adaugi o rezervare\n";
        cout << "Apasa 4 ca sa adaugi o livrare\n";
        cout << "Apasa 5 ca sa stergi un restaurant/proprietar/angajat/rezervare\n";
        cout << "Apasa 6 ca sa stergi o livrare\n";
        cout << "Apasa 7 ca sa amani data deschiderii unui restaurant\n";
        cout << "Apasa 8 ca sa vezi varsta proprietarului\n";
        cout << "Apasa 9 ca sa vezi daca trebuie sa se pensioneze un angajat\n";
        cout << "Apasa 10 ca sa vezi cat te costa o rezervare\n";
        cout << "Apasa 11 ca sa vezi cat te costa livrarea\n";
        cout << "Apasa 12 ca sa afisezi\n";
        cout << "Apasa 13 ca sa modifici pretul livrarii\n";

        cin >> inputValue;
        if (inputValue == 0)
        {
            Restaurant* p = new Restaurant();
            cin>> *p;
            listaRestaurante.push_back (new Restaurant(*p));
        }
        else if (inputValue == 1)
        {
            Proprietar* p = new Proprietar();
            cin >> *p;
            listaRestaurante.push_back(new Proprietar(*p));
        }
        else if (inputValue == 2)
        {
            Angajat* p = new Angajat();
            cin >> *p;
            listaRestaurante.push_back(new Angajat(*p));
        }
        else if (inputValue == 3)
        {
            Rezervare* p = new Rezervare();
            cin>> *p;
            listaRestaurante.push_back (new Rezervare(*p));
        }
        else if (inputValue == 4)
        {
            Livrare* p = new Livrare();
            cin>> *p;
            listaLivrari.push_back (new Livrare(*p));
        }
        else if (inputValue == 5)
        {
            cout<<"Alege indexul: ";
            int index;
            cin>>index;
            listaRestaurante.erase(listaRestaurante.begin() + index);
        }
        else if (inputValue == 6)
        {
            cout<<"Alege indexul: ";
            int index;
            cin>>index;
            listaLivrari.erase(listaLivrari.begin() + index);
        }
        else if (inputValue == 7)
        {
            cout<< "Alege indexul: ";
            int index, luni;
            cin>>index;
            cout<< "Alege cate luni vrei sa amani: ";
            cin>>luni;
            //adresele(pointer) se cheama prin liniuta, cand avem obiecte se pune pct
            listaRestaurante[index]->amanaDeschidere(luni);
        }
        else if (inputValue == 8)
        {
            cout<< "Alege indexul: ";
            int index;
            cin>>index;
            try
            {
                listaRestaurante[index]->aniProprietar();
            }
            catch(int e)
            {
                cout<<"Index incorect\n";
            }
        }
        else if (inputValue == 9)
        {
            cout<< "Alege indexul: ";
            int index;
            cin>>index;
            try
            {
                listaRestaurante[index]->pensionareAngajat();
            }
            catch(int e)
            {
                cout<<"Index incorect\n";
            }
        }
        else if (inputValue == 10)
        {
            cout<< "Alege indexul: ";
            int index;
            cin>>index;
            try
            {
                listaRestaurante[index]->preturiRezervare();
            }
            catch(int e)
            {
                cout<<"Index incorect\n";
            }
        }
        else if (inputValue == 11)
        {
            cout<<"Alege indexul: ";
            int index;
            cin>>index;
            listaLivrari[index]->preturifirma();
        }
        else if (inputValue == 12)
        {
            for(int i = 0; i < listaRestaurante.size(); i++)
            {
                cout << *listaRestaurante[i];
            }
            for(int i = 0; i < listaLivrari.size(); i++)
            {
                cout << *listaLivrari[i];
            }
            cout<<endl;
        }
        else if (inputValue == 13)
        {
            cout<< "Alege index: ";
            int index;
            cin>>index;
            double pretNou;
            cout<<"Pretul nou este: ";
            cin>>pretNou;
            listaLivrari[index]->setPret(pretNou);
        }
        else
            break;
    }
    return 0;

}

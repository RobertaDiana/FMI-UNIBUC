import collections
import heapq

#                                    CONSULTATII


# CREARE MATRICE DE ADIACENTA

# f=open("graf.in")
# # se citeste nr de noduri si nr de muchii
# n,m=f.readline().split()
# # print(n,m)
# n=int(n)
# m=int(m)
# # matrice de adiacenta
# matrice = [[0 for i in range(n)] for j in range(n)]
# for k in range (m):
#     i, j= f.readline().split()
#     i = int(i)
#     j = int(j)
#     matrice[i - 1][j - 1] = matrice[j - 1][i - 1] = 1
# for linie in matrice:
#     print(linie)



# CREARE LISTA DE ADIACENTA


# f= open('graf.in', 'r')
# n,m=f.readline().split()
# print(n,m)
# n=int(n)
# m=int(m)
# # lista de lista
# ls=[[] for i in range(n+1)]
# for i in range(m):
#     u,v = [int(x) for x in f.readline().split()]
#     # graf orientat
#     ls[u].append(v)
#     ls[v].append(u)
# print(ls)


# SAU
# CONVERTIRE IN INT A CELOR 2 VARIABILE
# N NR DE NODURI, M NR DE MUCHII
# n,m=[int(x) for x in f.readline().split()]



# # PARCURGERE BFS
#
# s=1
# c=0
# a=[0 for i in range(n+1)]
# d=[0 for j in range(n+1)]
# def parcurgere_latime(s):
#     q=collections.deque()
#     q.append(s)
#     a[s]=1
#     while q:
#         u=q.popleft()
#         print(u,end=" ")
#         for v in ls[u]:
#             if a[v]==0:
#                 a[v]=1
#                 q.append(v)
#                 d[v]=1+d[u]
#
# parcurgere_latime(s)
# print()
# print(d[1:])
#
# # COMPONENTE CONEXE
#
# a=[0 for i in range(n+1)]
# for s in range(1,n+1):
#     if a[s]==0:
#         parcurgere_latime(s)
#         c+=1
#         print()
# print(c)
#
# # PARCURGERE ADANCIME
#
#                                  PRIMA VARIANTA
#
#
# with open("dfs.in", 'r') as fin:
#     n, m = fin.readline().split()
#     n = int(n)
#     m = int(m)
#     adj = {i + 1: [] for i in range(n)}
#     for k in range(m):
#         i, j = fin.readline().split()
#         i = int(i)
#         j = int(j)
#         adj[i].append(j)
#         adj[j].append(i)
#
# vizitat = [0 for i in range(n)]
# tata = [0 for i in range(n)]
# nivel = [0 for i in range(n)]
#
#
# def DFS(s):
#     vizitat[s - 1] = 1
#     for vertex in adj[s]:
#         if vizitat[vertex - 1] == 0:
#             tata[vertex - 1] = s
#             # nivel[vertex-1] = 1 + nivel[s]
#             DFS(vertex)
#
#
# componente_conexe = 0
# for vf in range(1, n + 1):
#     if vizitat[vf - 1] == 0:
#         componente_conexe += 1
#         DFS(vf)
# with open("dfs.out", "w") as fout:
#     fout.write(str(componente_conexe))


#                                A DOUA VARIANTA


# f= open('graf.in', 'r')
# n,m=f.readline().split()
# print(n,m)
# n=int(n)
# m=int(m)
# # lista de lista
# ls=[[] for i in range(n+1)]
# for i in range(m):
#     u,v = [int(x) for x in f.readline().split()]
#     # graf orientat
#     ls[u].append(v)
#     ls[v].append(u)
# def parcurgere_adancime(s):
#     a[s]=1
#     print(s, end=" ")
#     for v in ls[s]:
#         if a[v]==0:
#             parcurgere_adancime(v)
#
# a=[0 for i in range(n+1)]
# for s in range(1,n+1):
#     if a[s]==0:
#         parcurgere_adancime(s)
#         print()
# print(a)

#
# # TESTAM CONEXITATEA
# s=1
# a=[0 for i in range(n+1)]
# parcurgere_latime(s)
# if 0 in a[1:]:
#     print("nu e conex")
#

# SORTARE TOPOLOGICA CU DFS
# memoram varfurile intr-o stiva pe masura finalizarii lor
# ordinea in care sunt scoase din stiva => sortare topologica
# n=6
# m=7
# #doar de la a la b
# ls={1: [2, 5],
#     2: [],
#     3: [],
#     4: [6],
#     5: [2, 4],
#     6: [3]
#     }
#
# stiva=[]
# a=[0 for i in range(n+1)]
# def DFS(s):
#     # primul nod il marcam ca si vizitat
#     a[s]=1
#     # parcurgem in lista de adiacenta nodurile
#     for j in ls[s]:
#         if a[j]==0:
#             # parcurgem recursiv nodurile nevizitate
#             DFS(j)
#         # am terminat de explorat s- este finalizat
#         stiva.append(s)
# for i in range (1,n+1):
#     if a[i]==0:
#         DFS(i)
# # sa fie in ordine de la cap la coada
# sortare=[]
# # daca stiva este nevida
# while len(stiva)>0:
#     # adaugam u in sortare
#     u=stiva.pop()
#     sortare.append(u)
# print(sortare)


# SORTARE TOPOLOGICA CU BFS
# Pornim cu toate varfurile cu grad intern 0 si le
# adaugam intr-o coada
# Repetam: extragem un varf din coada, il eliminam din graf
# (scadem gradele interne ale vecinilor, nu il eliminam din reprezentare)
# adaugam in coada vecinii al caror grad intern devine 0


# DETERMINARE DE CICLURI
# GRAF NEORIENTAT
# are ciclu daca si numai daca exista muchie de intoarcere
# n=6
# m=7
# ls={1: [6],
#     2: [1,4],
#     3: [2],
#     4: [2],
#     5: [4],
#     6: [1,2,4]
#     }
# # pt vizitat
# a=[0 for i in range(n+1)]
# # vector tati
# d=[0 for i in range(n+1)]
# parcurgere=[]
# sw=0
# def DFS(x):
#     global sw
#     a[x]=1
#     if sw==0:
#         for i in range(len(ls[x])):
#             y=ls[x][i]
#             if a[y]==0:
#                     d[y]=x
#                     parcurgere.append(y)
#                     DFS(y)
#                     if sw==1:
#                         return
#             elif y!=d[x]:
#                 print("ciclu elementar")
#                 v=x
#                 while v!=y:
#                     print(v, end=" ")
#                     v=d[v]
#                 sw=1
#
# DFS(1)
# print(parcurgere)
# if sw==0:
#     print("graf aciclic")


# ALGORITMUL LUI KOSARAJU-nu e terminat
# parcurgem dfs graful + introducem intr-o stiva
# S fiecare varf la momentul la care este finalizat


# n,m=[int(x) for x in input().split()]
# # lista de lista
# # creare lista de adiacenta
# ls=[[] for i in range(n+1)]
# ls_transpus=[[] for i in range(n+1)]
# for i in range(m):
#     u,v = [int(x) for x in input().split()]
#     # graf orientat
#     ls[u].append(v)
#     ls_transpus[v].append(u)
# viz=[0 for i in range(n+1)]
# stiva=[]
# a=[0 for i in range(n+1)]
# def DFS(i):
#     a[i]=1
#     for j in ls[i]:
#         if a[j]==0:
#             # parcurgem recursiv nodurile nevizitate
#             DFS(j)
#         # am terminat de explorat s- este finalizat
#         stiva.append(i)
# for i in range (1,n+1):
#     if a[i]==0:
#         DFS(i)
# def DFS(i,nr):
#     viz[i]=nr
#     for j in ls_transpus[i]:
#         if viz[j]==0:
#             # parcurgem recursiv nodurile nevizitate
#             DFS(j)
# nr=1
# while len(stiva)>0:
#     # adaugam u in sortare
#     u=stiva.pop()
#     if viz[u]==0:
#         DFS(u,nr)
#         nr+=1
# for i in range(1,nr):
#     if viz[i]==nr:
#         print(i)
#     print(" ")


# #                                                  KRUSKAL

# # GRAF CONEX FARA CICLURI, PONDERAT, NEORIENTAT
# # SORTAM MUCHIILE CRESCATOR DUPA COST
# # SELECTAM MUCHIA DE COST MINIM CARE NU FORMEAZA
# # CICLURI CU MUCHIILE DEJA SELECTATE(CARE UNESTE 2 COMP CONEXE)
# # PENTRU A TESTA DACA SE FORMEAZA UN CICLU VOM MARCA DOUA NODURI
# # UNITE CU ACEEASI CULOARE SI VOM UNII DOUA NODURI DOAR DACA AU
# # CULORI DIFERITE
# # OPRIM ALGORITMUL CAND TOATE NODURILE AU ACEEASI CULOARE
#
# # initializare
# n=4
# #lista de muchii (x, y, cost)
# muchii=[(1,1,2), (1,3,4), (2,1,3), (2,1,2), (1,1,3), (2,1,4)]
#
# # vector de tati
# tata=[0 for i in range(n+1)]
# # vector de inaltime
# h=[0 for i in range(n+1)]
# # nr muchii selectate
# nrmuchii=0
# cost=0
# def reprezentare(u):
#     # global tata
#     # while tata[u]!=0:
#     #     u=tata[u]
#     # return u
#
#     # compresie de cala-varianta mai optima
#     if tata[u] ==0:
#         return u
#     tata[u]=reprezentare(tata[u])
#     return tata[u]
#
# def reuneste (u,v):
#     global tata,h
#     # reuniune ponderata
#     ru=reprezentare(u)
#     rv=reprezentare(v)
#     if h[ru]>h[rv]:
#         tata[rv]=ru
#     else:
#         tata[ru]=rv
#         if h[ru]==h[rv]:
#             h[rv]=h[rv]+1
# print("Muchiile arborelui sunt: ")
# for m in muchii:
#    # daca nu fac parte din ac componenta (adica nu avem ciclu)
#    if reprezentare(m[0]) != reprezentare(m[1]):
#         #printez muchiile
#         print(m[0], m[1])
#         reuneste(m[0], m[1])
#         cost=cost+m[2]
#         nrmuchii=nrmuchii+1
#         # ca sa fie arbore trebuie sa aiba n-1 muchii
#         if nrmuchii == n-1:
#             break
#
# print("Costul este: ", cost)
# print("Arborele de paduri disjuncte: ", tata[1:])
# print("Vectorul de inaltimi: ", h[1:])


#
#
# #            VARIANTA 2
# def find_iterative(nod):
#     root=nod
#     while(tata[root]) :
#         root=tata[root]
#     y= nod
#     temp=0
#     while (y!=root):
#         temp=tata[y]
#         tata[y]=root
#         y=temp
#     return root
#
# # def find_recursiv(nod):
# # if tata[nod] = 0:
# #    return nod
# # return tata[nod] = find_recursiv(tata[nod])


#                                                ALGORITM PRIM

# f= open('prim.in', 'r')
# n,m=f.readline().split()
# print(n,m)
# n=int(n)
# m=int(m)
# # lista de lista
# ls=[[] for i in range(n+1)]
# for i in range(m):
#     u,v,c= [int(x) for x in f.readline().split()]
#     # graf orientat
#     ls[u].append((v, c))
#     ls[v].append((u, c))
#     print(u,v,c)
# def prim(start):
#     global n, m , ls
#     d=  [float ("inf")] * (n+1)
#     tata=[0 for i in range(n+1)]
#     viz= [0 for i in range(n+1)]
#     d[start]=0
#     Q= []
#     heapq.heappush(Q, (d[start], start))
#     while len(Q) > 0:
#         # varful nevizitat cu d minim
#         u= heapq.heappop(Q) [1]
#         viz[u]+=1
#         # daca este prima extragere din Q a lui u relaxam arcele
#         if viz[u] == 1:
#             for (v, c) in ls[u]:
#                 if viz[v] == 0:
#                     if d[v] > c:
#                         tata[v] = u
#                         d[v] = c
#                         heapq.heappush(Q, (d[v], v))
#
#     return d, tata
#
# print("Introduceti nodul de start:")
# start = int(input())
# d, tata = prim(start)
#
#
# def print_muchii(tata):
#     for x in range(1,n+1):
#         if tata[x] != 0:
#             print(x , tata[x])
#
# print_muchii(tata)


#                                              ALGORTIM DIJKSTRA
#
#     #
#     # Drumuri minime de sursa unica
#     # graf ponderat cu cost pozitiv si poate contine circuite
#     # gra orientat
#     # generalizare BF
#     # arcele au cost egal=BF
#     # ARE MINHEAP
#     # O(m log n)
#
# graf = {
#     1: {2: 15, 3: 11},
#     2: {1: 15, 5: 10, 6: 5, 4: 3},
#     3: {1: 11, 5: 8, 6: 9},
#     4: {2: 3, 6: 2},
#     5: {2: 10, 6: 20, 3: 8},
#     6: {3: 9, 5: 20, 2: 5, 4: 2}
# }
# import heapq
# def Dijkstra(graf, start):
#     #dictionar cu nodurile si infinit prima oara
#     distante = {nod: float('infinity') for nod in graf}
#
#     #seteaza distanta de la nodul de start 0
#     distante[start] = 0
#
#     # pastreaza distantele de la nodul de start la cel curent
#     heap = [(0, start)]
#     while len(heap) > 0:
#         #extrage pe rand din heap
#         dist, nod = heapq.heappop(heap)
#         if dist <= distante[nod]:
#             #ia vecinii nodului curent
#             for vecin, cost in graf[nod].items():
#                 if dist+cost < distante[vecin]:
#                     distante[vecin] = dist+cost
#                     heapq.heappush(heap, (dist+cost, vecin))
#
#     return distante
# #distanta de la nodul de start la celelalte noduri
# start=1
# print(Dijkstra(graf, start))

#                                               ALGORITM BELLMAN-FORD


#     # Arcele pot avea si cost negativ
#     # graful nu contine circuite de cost negativ
#     # DETECTEAZA CIRCUITELE neafisand solutia optima
#     # Toate varfurile trebuie sa fie accesibile din nodul de start
#     # O(nm)
#     # Varianta optimizata
#     #     -> oprire cand nu s-au mai actualizat etichete
#     #     -> pastrare coada cu varfurile a caror eticheta s-a modificat
#
# n=6
# graf={
#     1:[(5,1),(6,2)],
#     2:[(4,-100)],
#     3:[(2,8),(5,4)],
#     4:[(3,1)],
#     5:[],
#     6:[]
# }
# from collections import deque
# #initializari
# start=1
# infinit=float("Inf")
# dist = [float("Inf")] * (n+1)
# dist[start] = 0
# tata=[0]*(n+1)
#
# def Bell():
#     global dist, tata, infinit, start
#     in_q = [0] * (n + 1)
#     q = deque([])
#     nr=[0]*(n+1)
#     q.append(start)
#     in_q[start]=1
#     while len(q)>0:
#         u = q.popleft()
#         in_q[u]=0
#         for (v,w) in graf[u]:
#             if dist[u]<infinit and dist[u]+w<dist[v]:
#                 dist[v] = dist[u]+w
#                 tata[v] = u
#                 if in_q[v]==0:
#                     q.append(v)
#                     in_q[v]=1
#                     nr[v]=nr[u]+1
#                     if nr[v]>n-1:
#                         return v #varful cu circuitul
#     return None
#
# print("Vectorul de distante este: ",dist[1:])
# print("Vectorul de tati este: ", tata[1:])
#
# #Facem n pași înapoi din v folosind vectorul tata (către s)
# #fie x vârful în care am ajuns
# #Afișăm circuitul care conține pe x folosind tata (din x până ajungem iar în x)
# x=Bell()
# print("Circuitul este: ")
# def LANT(s):
#     while s!=tata[s]:
#         print(s, end=" ")
#         s=tata[s]
#     else:
#         print(s, end=" ")
# if x!=None:
#     LANT(x)
# else:
#     print("Nu are circuit")


#                                                    ALGORITM FLUX CLASIC - EDMONDS-KARP

# from collections import deque
#
#
# def bf(s, n, la, lin, f, cost, tata, viz):
#     for i in range(n + 1):
#         viz[i] = tata[i] = 0
#
#     c = deque()
#
#     c.append(s)
#     viz[s] = 1
#     while (len(c) > 0):
#         x = c.popleft()
#         for y in la[x]:
#
#             if viz[y] == 0 and f[x][y] < cost[x][y]:
#                 tata[y] = x
#                 if y == n:
#                     return 1
#                 c.append(y)
#                 viz[y] = 1
#
#         for y in lin[x]:
#             if viz[y] == 0 and f[y][x] > 0:
#                 tata[y] = -x
#                 if y == n:
#                     return 1
#                 c.append(y)
#                 viz[y] = 1
#
#     return 0
#
#
# fin = open("maxflow.in")
# fout = open("maxflow.out", "w")
#
# c_max = 0
#
# n, m = [int(x) for x in fin.readline().split()]
# tata = [0] * (n + 1)
# viz = [0] * (n + 1)
#
# f = [[0 for i in range(n + 1)] for j in range(n + 1)]
# cost = [[0 for i in range(n + 1)] for j in range(n + 1)]
#
# la = [[] for i in range(n + 1)]
# lin = [[] for i in range(n + 1)]
# for i in range(m):
#     x, y, c = [int(x) for x in fin.readline().split()]
#
#     la[x].append(y)
#     lin[y].append(x)
#     cost[x][y] = c
#     f[x][y] = 0
#
#     if c > c_max:
#         c_max = c
#
# fin.close()
# fmax = 0
# s = 1  # sursa
# t = n  # destinatia
#
# while bf(s, n, la, lin, f, cost, tata, viz):
#     # calculam i(P) = capacitatea reziduala minima pe un arc de pe drumul de la s la t determinat cu bf
#     iP = c_max  # i(P)
#     t = n
#     fout.write("lantul (afisat invers -tema de modificat): ")
#     while t != s:
#         fout.write(f"{t} ")
#         if tata[t] >= 0:  # arc direct - capacitate c(e)-f(e)
#             if cost[tata[t]][t] - f[tata[t]][t] < iP:
#                 iP = cost[tata[t]][t] - f[tata[t]][t]
#             t = tata[t]
#
#         else:  # arc invers - capacitate f(e)
#             if f[t][-tata[t]] < iP:
#                 iP = f[t][-tata[t]]
#             t = -tata[t]
#
#     fout.write(f"{s} ")
#     fout.write(f" capacitate {iP}\n")
#      # revizuim fluxul de-a lungul lantului determinat
#     t = n;
#     while t != s:
#       if tata[t] >= 0:  # arc direct - creste fluxul cu iP
#         f[tata[t]][t] += iP
#         t = tata[t]
#       else:  # arc invers - scade fluxul cu iP
#         f[t][-tata[t]] -= iP
#         t = -tata[t]
#
#     fmax += iP  # creste valoarea fluxului cu iP
# fout.write("-----------------------------------------\n")
# fout.write(f"valoarea fluxului maxim = {fmax} \n")
# fout.write("un flux maxim: \n")
#
# for u in range(1, n + 1):
#     for v in la[u]:
#         fout.write(f"arcul {u} {v} flux {f[u][v]}\n")
#
# fout.close()

#                                                       ALGORITM CICLU EULERIAN
# '''
#     Dat un graf NEORIENTAT sa se verifice daca e eulerian
#     daca este sa se afiseze un ciclu eulerian
#     altfel sa zic de ce nu e eulerian
#     verificare grade ca toate sa fie pare
#     pt ciclu alg lui Hierholzer
# '''
# def verific():
#     global graf, n, grade
#     for i in range (n):
#         grade[i]=0
#
#     for l in graf:
#         for nod in l:
#             grade[nod]+=2
#     print(grade)
#     for i in range(n):
#         if grade[i]%2==1:
#             return False
#     return True
# def Circuit():
#     global graf, n
#     nr_muchii= dict()#dictionar cu gradele nodurilor
#     for i in range(n):
#         nr_muchii[i] = len(graf[i])
#
#     #stiva cu noduri
#     curent = []
#     # vector pentru circuit
#     circuit = []
#
#     #incep de la nodul 0
#     curent.append(0)
#     nod_curent = 0
#
#     while len(curent):
#         if nr_muchii[nod_curent]!=0:#daca a mai ramaas vreo muchie
#             curent.append(nod_curent)#adaug nodul
#
#             # retin urmatorul nod, pt ca urmeaza sa sterg muchia
#             nod_urm = graf[nod_curent][-1]
#             nr_muchii[nod_curent] -= 1 #scad nr de muchii
#             graf[nod_curent].pop() #scod nodul(auto muchia)
#
#             nod_curent = nod_urm #trec la urmatorul nod
#         else:
#             circuit.append(nod_curent)#daca nu a mai ramas nicio muchie
#                                     #pot adauga nodul in circuit
#             nod_curent = curent[-1]#trec la urmatorul nod
#             curent.pop()
#     print("Circuitul este: ", circuit)
#
# #folosesc lista de adiacenta
# #incep numerotarea de la nodul 0!!
# n=7
# graf=[[1, 6], [2], [0, 3], [4], [2, 5], [0], [4]]
# grade = {}
# if verific()==True:
#     print("Graful este eulerian")
#     print("un circuit eulerian este:", end=" ")
#     Circuit()
# else:
#     print("graful NU este eulerian deoarece nodurile: ", end=" ")
#     for i in range(n):
#         if grade[i]%2==1:
#             print(i, end=" ")
#     print("au grade impare")
#
#
# #     GRAF ORIENTAT
#
# n=5
# #lucrez de la 0 ca sa mi fie mai usor
# graf=[[0,1], [1,2], [2,1], [1,4], [4,0], [2,4], [3,2], [4,3]]
# #calculez gradele interne si externe pt fiecare nod
# grade={}
# for i in range(n):
#     grade[i]=[0,0] #-/+
# for l in graf:
#     grade[l[0]][1]+=1 #iese din l[0] +
#     grade[l[1]][0]+=1 #intra in l[1] -
# #verific existenta drum
# ok=1
# for i in range(n):
#     if grade[i][0]!=grade[i][1]:
#         ok=0
#         break
# if ok==1:
#     print("are drum eulerian")
#     #ma folosesc de algoritmul de ciclu

                                                      # ciclu eulerian var nerecursiva

# f=open('euler.in', 'r')
# n,m=f.readline().split()
# # converteste in int
# n=int(n)
# m=int(m)
# # lista de lista
# ls=[[] for i in range(n+1)]
# for i in range(m):
#     u,v = [int(x) for x in f.readline().split()]
#     ls[u].append(v)
#     ls[v].append(u)
# stiva=[]
# start=1
# c=[]
# stiva.append(start)
# while len(stiva)>0:
#     v= stiva[-1]
#     if len(ls[v]) !=0:
#         w=ls[v][-1]
#         ls[v].pop()
#         ls[w].remove(v)
#         stiva.append(w)
#     else:
#         c.append(v)
#         stiva.pop()
# print(c)

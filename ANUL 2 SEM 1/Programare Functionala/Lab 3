-- import Data.List



-- -- 1)

-- -- Sa se scrie o functie nrVocale care pentru o lista de siruri de caractere, calculeaza numarul total de vocale ce 
-- -- apar în cuvintele palindrom. Pentru a verifica daca un sir e palindrom, puteti folosi functia reverse, iar pentru a 
-- -- cauta un element într-o lista puteti folosi functia elem. Puteti defini oricâte functii auxiliare.
-- nrVocale :: [String] -> Int
-- nrVocale []=0
-- nrVocale (s:l)
--     |palindrom s = countV s + nrVocale l
--     |otherwise = nrVocale l

-- palindrom :: String -> Bool
-- palindrom s = s == reverse s

-- countV :: String ->Int
-- countV [] = 0
-- countV (c:s)
--   | c `elem` "aeiouAEIOU" = 1+countV s
--   | otherwise = countV s


-- -- 2)
-- -- Sa se scrie o functie care primeste ca parametru un numar si o lista de întregi, si adauga elementul dat dupa fiecare element par 
-- -- din lista. Sa se scrie si prototipul functiei.
-- functie :: Int -> [Int] -> [Int]
-- functie _ [] = []
-- functie x (ls:l) = 
--   if even ls 
--     then [ls] ++ [x] ++ functie x l
--     else [ls] ++ functie x l

-- -- 3)
-- -- Sa se scrie o functie care are ca parametru un numar întreg  si determina lista de divizori ai acestui numar. Sa se scrie si 
-- -- prototipul functiei.
-- divizori :: Int -> [Int]
-- divizori n =[d | d <- [1..n], n `mod` d ==0]

-- --4)
-- -- Sa se scrie o functie care are ca parametru o lista de numere întregi si calculeaza lista listelor de divizori.
-- listadiv :: [Int] -> [[Int]]
-- listadiv l =[divizori n | n<-l]

-- -- 5)
-- -- Scrieti o functie care date fiind limita inferioara si cea superioara (întregi) a unui interval închis si 
-- -- o lista de numere întregi, calculeaza lista numerelor din lista care apartin intervalului.

-- -- a) Folositi doar recursie. Denumiti functia inIntervalRec
-- inIntervalRec :: Int -> Int -> [Int] -> [Int]
-- inIntervalRec x y [] = []
-- inIntervalRec x y (l:ls) =
--   if x <= l && l <= y
--     then l : inIntervalRec x y ls
--     else inIntervalRec x y ls
      

-- -- b) Folositi descrieri de liste. Denumiti functia inIntervalComp
-- inIntervalComp :: Int-> Int-> [Int]-> [Int]
-- inIntervalComp i s x = [z| z <-x,  z<=s && i<=z]


-- --6)Scrieti o functie care numara câte numere strict pozitive sunt într-o lista data
-- --  ca argument.
-- --a) recursiv
-- pozitiveRec :: [Int] -> Int
-- pozitiveRec [] = 0
-- pozitiveRec (l:ls) =
--   if l > 0
--     then 1 + pozitiveRec ls
--     else pozitiveRec ls

-- --b) descrieri de liste
-- pozitiveComp :: [Int] -> Int
-- pozitiveComp [] = 0
-- pozitiveComp l = length [z | z <-l , z > 0]


-- -- 7)
-- -- Scrieti o functie care data fiind o lista de numere calculeaza lista pozitiilor elementelor impare
-- -- din lista originala.
-- -- a) Folositi doar recursie. Denumiti functia pozitiiImpareRec.
-- -- • Indicatie: folositi o functie ajutatoare, cu un argument în plus reprezentând pozitia curenta din lista.
-- pozImpRec :: [Int] -> [Int]
-- pozImpRecAux :: [Int] -> Int -> [Int]
-- pozImpRecAux [] _ = []
-- pozImpRecAux (x:xs) i
--    | x `mod` 2 == 1= i:pozImpRecAux xs (i+1)
--    |otherwise = pozImpRecAux xs (i+1)
-- pozImpRec l = pozImpRecAux l 0

-- -- b) Folositi descrieri de liste. Denumiti functia pozitiiImpareComp.
-- -- • Indicatie: folositi functia zip pentru a asocia pozitii elementelor listei (puteti cauta exemplu în curs).
-- pozImpComp :: [Int] -> [Int]
-- pozImpComp l = [p | (x,p) <- zip l [0..], odd x]

-- -- 8) 
-- -- Scrieti o functie care calculeaza produsul tuturor cifrelor care apar în sirul de caractere dat ca intrare. 
-- -- Daca nu sunt cifre în sir, raspunsul functiei trebuie sa fie 1 . 

--a)Folositi doar recursie. Denumiti functia multDigitsRec

-- multDigitsRec :: String -> Int 
-- multDigitsRec "" = 1
-- multDigitsRec (xs:s) = 
--   if xs `elem` "0123456789"
--     then (ord xs + (-1) * ord '0' )* multDigitsRec s
--     else multDigitsRec s

--b)Folositi descrieri de liste.. Denumiti functia multDigitsComp

-- multDigitsComp :: String -> Int
-- multDigitsComp "" = 1
-- multDigitsComp l = product [digitToInt z | z<-l, isDigit z ]


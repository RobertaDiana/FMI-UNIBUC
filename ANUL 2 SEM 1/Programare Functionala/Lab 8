-- Exercitiul 1
-- Se dau următoarele tipuri de date ce reprezinta puncte cu numar variabil de coordonate
-- intregi:
data Punct = Pt [Int]

--Arbori cu informatia în frunze 
-- şi clasă de tipuri ToFromArb

data Arb = Vid | F Int | N Arb Arb
    deriving Show

class ToFromArb a where
    toArb :: a -> Arb
    fromArb :: Arb -> a

-- a) Să se scrie o instantă a clasei Show pentru tipul de date Punct, astfel încât lista
-- coordonatelor sa fie afisată sub forma de tuplu.

showPt :: Punct -> String 
showPt (Pt[])=""
showPt (Pt(h:t))= if t/=[] then show h ++ "," ++ showPt (Pt t) else show h 

instance Show Punct where
     show (Pt pct) = "(" ++ (showPt (Pt pct)) ++ ")"  


-- b) Să se scrie o instanţă a clasei ToFromArb pentru tipul de date Punct astfel incat lista
-- coordonatelor punctului sa coincidă cu frontiera arborelui.
-- toArb (Pt [1,2,3]) N (F 1) (N (F 2) (N (F 3) Vid))
-- fromArb $ N (F 1) (N (F 2) (N (F 3) Vid)) :: Punct
-- Pt [1,2,3]

(*++*) :: Punct -> Punct -> Punct
Pt l1 *++* Pt l2 = Pt (l1 ++ l2)

instance (ToFromArb Punct) where
    toArb :: Punct -> Arb
    toArb (Pt []) = Vid
    toArb (Pt (x:xs)) = N (F x) (toArb (Pt xs))

    fromArb :: Arb -> Punct
    fromArb Vid = Pt []
    fromArb (F x) = Pt [x]
    fromArb (N ram1 ram2) = fromArb ram1 *++* fromArb ram2



--Exercitiul 2
--Se dă următorul tip de date reprezentând figuri geometrice.
data Geo a = Square a | Rectangle a a | Circle a
     deriving Show
       
-- Si clasa GeoOps în care se definesc operatiile perimeter 
-- si area.

class GeoOps g where
   perimeter :: (Floating a) => g a -> a
   area :: (Floating a) => g a -> a

-- a) Să se instantieze clasa GeoOps pentru tipul de date Geo. Pentru valoarea pi există
-- functia cu acelasi nume (pi).

-- ghci> pi
-- 3.141592653589793

instance GeoOps Geo where 
    perimeter(Square a) = 4*a
    perimeter(Rectangle a b) = 2*(a+b)
    perimeter(Circle r) = 2*pi*r

    area(Square a) = a*a
    area(Rectangle a b) = a*b
    area(Circle a) = a*a*pi
    

-- b) Să se instantieze clasa Eq pentru tipul de date Geo, astfel încât două figuri
-- geometrice să fie egale dacă au perimetrul egal.

instance (Floating a, Eq a) => Eq (Geo a) where 
    a == b = perimeter a == perimeter b


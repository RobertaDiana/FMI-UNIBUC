-- import Data.List
-- import System.Win32 (try')


-- -- 1. Să se scrie o functie poly2 care are patru argumente de tip Double, a,b,c,x si calculează a*xˆ2+b*x+c.
-- -- Scrieti si signatura functiei (poly :: ceva).

-- poly2 :: Double -> Double -> Double -> Double -> Double
-- poly2 a b c x = a*x^2+ b*x+c

-- -- 2) Să se scrie o functie eeny care întoarce “eeny” pentru input par si “meeny” pentru input impar. Hint:
-- -- puteti folosi functia even (puteti căuta pe https://hoogle.haskell.org/).
-- eeny :: Integer -> String
-- eeny x = 
--     if even x
--        then "eeny"
--        else "meeny"

-- -- 3) Să se scrie o functie fizzbuzz care întoarce “Fizz” pentru numerele divizibile cu 3, “Buzz” pentru
-- -- numerele divizibile cu 5 si “FizzBuzz” pentru numerele divizibile cu ambele. Pentru orice alt număr se
-- -- întoarce sirul vid. Pentru a calcula modulo a două numere puteti folosi functia mod. Să se scrie această
-- -- functie în 2 moduri: folosind if si folosind gărzi (conditii).


-- -- Prima varianta
-- -- fizzbuzz :: Integer -> String
-- -- fizzbuzz y = 
-- --     if mod y 15 ==0 
-- --         then "FizzBuzz"
-- --           else 
-- --           if mod y 3 == 0 
-- --              then "Fizz"
-- --              else 
-- --                 if mod y 5 == 0
-- --                    then "Buzz"
-- --                    else ""

-- -- A doua varianta
-- fizzbuzz :: Integer -> String   
-- fizzbuzz y 
--     | mod y 15 == 0 ="Fizzbuzz"
--     | mod y 3== 0 = "Fizz"
--     | mod y 5 == 0 = "Buzz"
--     |otherwise = ""   


-- --  Recursivitate

-- fibonacciCazuri :: Integer -> Integer
-- fibonacciCazuri n 
--    | n<2 =n 
--    | otherwise = fibonacciCazuri (n-1) + fibonacciCazuri(n-2)

-- fibonacciEcuational :: Integer -> Integer
-- fibonacciEcuational 0 = 0
-- fibonacciEcuational 1 = 1
-- fibonacciEcuational n = 
--     fibonacciEcuational (n-1) + fibonacciEcuational (n-2)


-- -- 4)
-- tribonacci :: Integer -> Integer
-- tribonacci n 
--    | n == 1 = 1
--    | n == 2 = 1
--    | n == 3 = 2
--    | otherwise = tribonacci (n-1) + tribonacci (n-2) + tribonacci (n-3)

-- tribonacciEcuational :: Integer -> Integer
-- tribonacciEcuational 1 = 1
-- tribonacciEcuational 2 = 1
-- tribonacciEcuational 3 = 2
-- tribonacciEcuational n =
--     tribonacci (n-1) + tribonacci (n-2) + tribonacci (n-3)

-- -- 5) Să se scrie o functie care calculează coeficientii binomiali, folosind recursivitate. Acestia sunt determinati
-- -- folosind urmatoarele ecuatii.

-- binomial :: Integer -> Integer -> Integer
-- binomial n 0 = 1
-- binomial 0 k = 0
-- binomial n k = binomial (n-1) k + binomial (n-1) (k-1)

-- -- 6) Să se implementeze următoarele functii folosind liste:
-- -- a) verifL - verifică dacă lungimea unei liste date ca parametru este pară

-- verifL :: [Int] -> Bool
-- verifL x =
--     if mod (length x) 2 == 0
--         then True
--         else False

-- -- b) takefinal - pentru o listă dată ca parametru si un număr n, întoarce lista cu ultimele n elemente.
-- -- Dacă lista are mai putin de n elemente, se intoarce lista nemodificată.

-- takefinal :: [Int] -> Int -> [Int]
-- takefinal x n =
--     if length x < n 
--         then x
--             else 
--             drop (length x + (-n)) x

-- -- takefinal :: [Int] -> Int -> [Int]
-- -- takefinal x n =
-- --     if length x < n 
-- --         then x
-- --             else 
-- --             drop (length x + (-n)) x
        

-- -- c)  remove - pentru o listă si un număr n se întoarce lista din care se sterge elementul de pe pozitia n.
-- -- (Hint: puteti folosi functiile take si drop). Scriti si prototipul functiei.

-- remove :: [Int] -> Int -> [Int]
-- remove x n =
--     if length x < n
--         then x
--         else concat[take (n-1) x, takefinal x (length x + (-n))]
    

-- -- Recursivitate pe liste 

-- semiPareRec :: [Int] -> [Int]
-- semiPareRec [] = []
-- semiPareRec (h:t)
--  | even h = h `div` 2 : t'
--  | otherwise = t'
--  where t' = semiPareRec t

-- -- 7)
-- -- a)myreplicate - pentru un întreg n si o valoare v întoarce lista de lungime n ce are doar elemente egale
-- -- cu v. Să se scrie si prototipul functiei.

-- myreplicate :: Int -> Int -> [Int]
-- myreplicate 0 v = []
-- myreplicate n v = v:myreplicate (n-1) v

-- --b) sumImp - pentru o listă de numere întregi, calculează suma valorilor impare. Să se scrie si prototipul functiei.

-- sumImp :: [Int] -> Int
-- sumImp [] = 0
-- sumImp (x:xs) = 
--     if even x
--         then sumImp xs
--         else x + sumImp xs

-- -- c) totalLen - pentru o listă de siruri de caractere, calculează suma lungimilor sirurilor care încep cu
-- -- caracterul ‘A’.

-- totalLen :: [String] -> Int
-- totalLen [] = 0
-- totalLen (x:xs) =
--     if head x == 'A'
--         then length x + totalLen xs
--         else totalLen xs

-- sumPare :: [Int] -> Int
-- sumPare [] = 0
-- sumPare (x:xs) = if odd x then sumPare xs else x+sumPare xs 

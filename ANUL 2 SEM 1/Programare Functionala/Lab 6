--Exercitiul 1 

ionatanFaraVierme :: Fruct
ionatanFaraVierme = Mar "Ionatan" False
goldenCuVierme :: Fruct
goldenCuVierme = Mar "Golden Delicious" True
portocalaSicilia10 :: Fruct
portocalaSicilia10 = Portocala "Sanguinello" 10
listaFructe :: [Fruct]
listaFructe = [Mar "Ionatan" False, 
                Portocala "Sanguinello" 10,
                Portocala "Valencia" 22,
                Mar "Golden Delicious" True,
                Portocala "Sanguinello" 15,
                Portocala "Moro" 12,
                Portocala "Tarocco" 3,
                Portocala "Moro" 12,
                Portocala "Valencia" 2,
                Mar "Golden Delicious" False,
                Mar "Golden" False,
                Mar "Golden" True]


data Fruct = Mar String Bool | Portocala String Int

--a)Scrieti o functie care indică dacă un fruct este o portocală de Sicilia sau nu. Soiurile de portocale din
-- Sicilia sunt Tarocco, Moro si Sanguinello. De exemplu,


ePortocalaDeSicilia :: Fruct -> Bool
ePortocalaDeSicilia (Mar _ _ ) = False
ePortocalaDeSicilia (Portocala soi felii)
    |soi == "Tarocco" || soi== "Moro" || soi== "Sanguinello" = True
    |otherwise = False  

--b) Scrieti o functie care calculează numărul total de felii ale portocalelor de Sicilia dintr-o listă de fructe.

nrFeliiPortocala :: Fruct -> Int
nrFeliiPortocala (Portocala _ felii) = felii
nrFeliiMar :: Fruct -> Int 
nrFeliiMar (Mar _ _ ) =0

nrFeliiSicilia :: [Fruct] -> Int
nrFeliiSicilia [] = 0
nrFeliiSicilia (x:xs) 
    |ePortocalaDeSicilia(x) == True = nrFeliiPortocala(x) +  nrFeliiSicilia xs 
    |ePortocalaDeSicilia(x) == False = nrFeliiSicilia xs + 0
    |otherwise = nrFeliiSicilia xs +0 

--c) Scrieti o functie care calcuelază numărul de mere care au viermi dintr-o lista de fructe.

nrMereViermi :: [Fruct] -> Int
nrMereViermi [] = 0
nrMereViermi ((Portocala _ _) : l) = nrMereViermi l
nrMereViermi ((Mar soi vierme) : l)
    | vierme == True = 1 + nrMereViermi(l)
    | otherwise = 0 + nrMereViermi(l)


nrMereViermi1 :: [Fruct] -> Int
nrMereViermi1 list = length [ b | Mar s b <- list , b ]

-- Exercitiul 2

type NumeA = String 
type Rasa = String
data Animal = Pisica NumeA | Caine NumeA Rasa 
    deriving Show 

--a) Scrieti o functie care întoarce "Meow!" pentru pisică si "Woof!" pentru câine.


vorbeste :: Animal -> String
vorbeste (Pisica _ ) = "Meow!"
vorbeste (Caine _ _ ) = "Woof!"

 --b) Scrieti o functie care întoarce rasa unui câine dat ca parametru sau Nothing dacă parametrul este o pisică.


rasa :: Animal -> Maybe String 
rasa (Pisica _) = Nothing
rasa (Caine _ rasa ) = Just rasa

-- Exercitiul 3

data Linie = L [Int]
     deriving Show
data Matrice = M [Linie]
     deriving Show

--a) Scrieti o functie care verifica daca suma elementelor de pe fiecare linie este egala
--cu o valoare n. Rezolvati cerinta folosind foldr.


verifica :: Matrice -> Int -> Bool
verifica (M l ) nr = foldr (&&) True (map (\(L l) -> sum l == nr) l) 

--b) Scrieti o functie doarPozN care are ca parametru un element de tip Matrice si un
--numar intreg n, si care verifica daca toate liniile de lungime n din matrice au
--numai elemente strict pozitive.


verif :: Linie -> Int -> Bool 
verif (L line) n =
    if length line == n
        then length (filter (>0) line) == n
        else True 
doarPozN :: Matrice -> Int -> Bool
doarPozN (M m) n = foldr( \(L line) result -> result && verif (L line) n) True m

--c) Definiti predicatul corect care verifică dacă toate liniile dintr-o matrice au aceeasi lungime.

corect :: Matrice -> Bool
corect (M []) = True 
corect (M [x]) = True
corect (M (x:y:lines)) = 
    if (length first) == (length second)
        then True && corect (M (y:lines))
        else False 
    where 
        first = (\(L x) -> x) x
        second = (\(L y) -> y) y
